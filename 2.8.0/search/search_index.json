{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"API/","title":"API Docs","text":"<p>Danger</p> <p>  The API, and all of Maintainerr for that matter, does not have an authentication method. There are certain API calls, that if you make your instance public facing, will expose your entire settings configuration. This could include all of your service's API keys. Proceed with extreme caution if you choose to expose Maintainerr to the public.  </p>"},{"location":"API/#api-endpoints","title":"API endpoints","text":"<p>This API documentation is a work in progress. For the time being, its usefulness is in showing the endpoints and URL parameters. Moving forward, expected responses will also be included.</p> <p></p>"},{"location":"Changelog/","title":"2.8.0 (2025-01-14)","text":""},{"location":"Changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Has series/season finale should only pass when file exists (#1502) (00e0255)</li> </ul>"},{"location":"Changelog/#features","title":"Features","text":"<ul> <li>Add \"Last episode aired at (season)\" for episodes (#1491) (fecf360)</li> </ul>"},{"location":"Changelog/#270-2025-01-05","title":"2.7.0 (2025-01-05)","text":""},{"location":"Changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Equals with lists now only returns true if they are identical (e900dac)</li> </ul>"},{"location":"Changelog/#features_1","title":"Features","text":"<ul> <li>Add rating vote count filters (05617e1)</li> </ul>"},{"location":"Changelog/#260-2025-01-01","title":"2.6.0 (2025-01-01)","text":""},{"location":"Changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Docs links (#1487) (d8bf2d1)</li> </ul>"},{"location":"Changelog/#features_2","title":"Features","text":"<ul> <li>Add rating filters (RT, IMDb, Trakt) (4b79f56)</li> </ul>"},{"location":"Changelog/#250-2024-12-30","title":"2.5.0 (2024-12-30)","text":""},{"location":"Changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>*arr server not persisting on initial save (#1475) (8ace636)</li> <li>Client side error when changing rule data/media type (2e086b2)</li> <li>Resolve various UI &amp; UX issues (#1452) (354b903)</li> </ul>"},{"location":"Changelog/#features_3","title":"Features","text":"<ul> <li>Add season has season/series finale episode (f53d094)</li> <li>Add season number filter (f0fd71e)</li> </ul>"},{"location":"Changelog/#241-2024-12-25","title":"2.4.1 (2024-12-25)","text":""},{"location":"Changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Do not reset collection on *arr server change (#1467) (6bcc45e)</li> </ul>"},{"location":"Changelog/#240-2024-12-20","title":"2.4.0 (2024-12-20)","text":""},{"location":"Changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Community rules &amp; incorrect out of date (#1448) (1797104)</li> <li>Media type selection not reflecting what is saved (#1444) (47a9651)</li> </ul>"},{"location":"Changelog/#features_4","title":"Features","text":"<ul> <li>add about page (#1408) (56fda5c)</li> </ul>"},{"location":"Changelog/#231-2024-12-17","title":"2.3.1 (2024-12-17)","text":""},{"location":"Changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Container startup failing for some (3a18d2e)</li> </ul>"},{"location":"Changelog/#230-2024-12-17","title":"2.3.0 (2024-12-17)","text":""},{"location":"Changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>PATH_PREFIX not replaced when using user directive (#1394) (9b237ea)</li> <li>changed all docs URLs to match new docs URL generations. (c8161a3)</li> <li>Docker startup (ce4e7ad)</li> <li>error when overseerr URL is null (a2aeb99)</li> <li>Handling collections failure after multi arr (e299c15)</li> <li>Ignore Plex smart collections due to library corruption (#1355) (7cf6780)</li> <li>lint issues (149dc78)</li> <li>Only allow saving successfully tested settings (bd88567)</li> <li>package.json: lint:server script (575a6c5)</li> <li>Remove cached arr API client on setting changes (3081105)</li> <li>Revert defaulting to ipv6 (8ee4888)</li> <li>Sonarr media existence check in collection handling (8cd0030)</li> <li>Trim trailing slash in Overseerr URL (d3dab2d)</li> </ul>"},{"location":"Changelog/#features_5","title":"Features","text":"<ul> <li>Add \"Original Language\" rule to Sonarr &amp; Radarr (#1407) (bf6bf49)</li> <li>Add \"Show on library recommended\" option (ccc13ba)</li> <li>Add base path support (#1373) (9597bfa)</li> <li>Add envars to control service ports (#1333) (b418975)</li> <li>Support mutiple *arr servers (156aca1)</li> </ul>"},{"location":"Changelog/#221-2024-11-06","title":"2.2.1 (2024-11-06)","text":""},{"location":"Changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Saving rules when Tautulli not configured (7f1211e)</li> </ul>"},{"location":"Changelog/#220-2024-11-05","title":"2.2.0 (2024-11-05)","text":""},{"location":"Changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Add additional Tautulli rules (#1287) (e3bb69e)</li> <li>Added Curl in the Docker-container so users can create healthchecks (#1288) (1aff795)</li> <li>Align Tautulli username results with Overseerr (#1339) (5bab5d9)</li> <li>Changed the hostname to :: to enable ipv6 compatibility (#1259) (a0f93d4)</li> <li>Collection details not showing in Safari (#1316) (1e89cf6)</li> <li>Plex cache reset handling if not all apps configured (#1291) (09003c1)</li> <li>Tautulli Times viewed &amp; Total views (#1290) (3f41a3c)</li> </ul>"},{"location":"Changelog/#features_6","title":"Features","text":"<ul> <li>Add base URL to Tautulli settings (#1315) (f569a95)</li> <li>Add per collection override of the Tautulli watched percent (#1300) (Thanks @benscobie) (96a73a6)</li> <li>Add Tautulli integration (Thanks to @benscobie) (#1280) (55aa547)</li> </ul>"},{"location":"Changelog/#212-2024-09-13","title":"2.1.2 (2024-09-13)","text":""},{"location":"Changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fixed the 'Viewed by' rule for the server owner for movies. This was already fixed for TV shows in 2.1.1 (#1266) (a41e8ab)</li> </ul>"},{"location":"Changelog/#211-2024-09-09","title":"2.1.1 (2024-09-09)","text":""},{"location":"Changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fixed an issue where 'Users that saw all available episodes' &amp; 'Users that watch the show/season/episode' wouldn't work for the owner user after 2.1.0 (#1252) (bf8c2d3)</li> <li>The server no longer crashes when community.plex.tv rate limits have been hit. Also improved logging and increased API paging chunks to minimize the occurrence of this error. (#1253) (8227f8c)</li> <li>When a Tvdb ID isn't found, a warning with the media item's title is now displayed (fb27332)</li> </ul>"},{"location":"Changelog/#210-2024-09-02","title":"2.1.0 (2024-09-02)","text":""},{"location":"Changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Added extra error handling to Overseerr's isRequested rule (#1232) (dc42a98)</li> <li>Fetching movies by tmdbId no longer utilizes Radarr's lookup endpoint (#1214) (1a84b8c)</li> <li>Fixed an issue where Overseerr's 'requested by' rule failed to fetch the Plex user when the user uses a display name (a4422f5)</li> <li>Fixed an issue where Overseerr's 'requested by' rule failed to fetch the Plex user when the user uses a display name (#1231) (9f1cc65)</li> <li>Fixed Radarr file size rule, when 'sizeOnDisk' is not available, it'll now fall back to movieFile.size (#1205) (1aac50b)</li> <li>Improved logging when media is not removable through *arr (#1177) (074c7c3)</li> <li>Improved Overseerr rule logs in case of failures (#1178) (f6466e3)</li> </ul>"},{"location":"Changelog/#features_7","title":"Features","text":"<ul> <li>Added an integration with the Plex community API and introduced a 'Plex - Watchlisted by' rule utilizing this endpoint (#1152) (1ebba97)</li> </ul>"},{"location":"Changelog/#204-2024-06-19","title":"2.0.4 (2024-06-19)","text":""},{"location":"Changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Added \"Last Aired At\" rule for shows &amp; seasons (Thanks @benfugate) (63db845)</li> <li>Adjusted UI to listen to all interfaces, resolving issues with multiple networks (#1104) (017a25d)</li> <li>Fixed an issue where .next/cache directory creation would fail when using a custom user (#1102) (fa9a30c)</li> <li>Fixed an issue where fetching some Plex ratingkeys from shows would fail (2268513)</li> <li>Fixed an issue where having an operator on the first rule would make the rule return a 'null' value (ce18dea)</li> <li>Redirected all links to the hosted documentation &amp; removed the internal Jsdoc documentation server (#1134) (0ed8164), closes #1119 #1119 #1119 #1119</li> </ul>"},{"location":"Changelog/#203-2024-03-25","title":"2.0.3 (2024-03-25)","text":""},{"location":"Changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Automatically prepend https for Overseerr, Sonarr and Radarr when choosing port 443 (1616cfd)</li> <li>Ensure proper URL generation on the settings pages by handling the pathname in hostnames correctly (f8a80a7)</li> <li>Fixed an issue where episodes would only be deleted, but not unmonitored when using the 'Unmonitor and delete episode' rule action (#943) (070b381)</li> <li>rules: Season action 'unmonitor and delete existing episodes' will now correctly remove and unmonitor existing episodes. The season itself will stay monitored. (#951) (c5a135b)</li> <li>Shows will now be correctly unmonitored when using the 'unmonitor..' Sonarr action. Previously, only the seasons would be unmonitored (e6bff13)</li> </ul>"},{"location":"Changelog/#202-2024-02-11","title":"2.0.2 (2024-02-11)","text":""},{"location":"Changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Failure to fetch latest GitHub version crashes the UI (#891) (4ce9ac9)</li> </ul>"},{"location":"Changelog/#201-2024-02-09","title":"2.0.1 (2024-02-09)","text":""},{"location":"Changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>docker: ensure $HOME is set consistently for all configs. (f952bba)</li> <li>Resolve SQL error during Plex collection recreation (be1b801)</li> <li>Resolved an issue where Plex's SSL flag would not be updated correctly on the settings page (d65927a)</li> </ul>"},{"location":"Changelog/#200-2024-02-02","title":"2.0.0 (2024-02-02)","text":""},{"location":"Changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>build: Added a workaround for the 'Text file busy' error when using an old Linux kernel on the Docker host. (19f75bd)</li> <li>collection handling: Ensure media not found in Starr apps is still deleted if required by the Starr action (#812) (d55bfe2)</li> <li>docker: Improved flexibility by enabling custom users with the Docker 'user' directive. The previous implementation restricted this to the 'node' user (496401f)</li> <li>Move the supervisord.log file to the data directory (#777) (cd5df98)</li> <li>rules: Addressed an issue where certain collection-related rules exhibited unexpected behavior when media was added to other groups in the same run (56c133a)</li> <li>rules: Fixed an issue where the 'Plex - present in amount of other collections' rule wouldn't work with custom collections (493a3ea)</li> <li>rules: Resolved an issue where the 'Overseerr - Requested by user' rule didn't work for local Overseerr users (#822) (5391538)</li> <li>rules: Resolved an issue where the Sonarr status rule was incorrectly mapped and couldn't function (a4bb4df)</li> <li>settings: Resolved an issue where updated cron schedules were not visible on the UI until the application was reloaded (87a2091)</li> <li>tasks: Improved task management by limiting the simultaneous execution of rule and collection handler tasks to one. Additionally, ensured that collection handling cannot occur concurrently with rule handling (bb3d16c)</li> <li>ui: Added feedback to the manual rule &amp; collection handling buttons (f1183c0)</li> </ul>"},{"location":"Changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>add data directory permission check (bbced56)</li> <li>Updated UI Docker port to use non-privileged port 6246 (4751079)</li> </ul>"},{"location":"Changelog/#features_8","title":"Features","text":"<ul> <li>Added the ability to test media items against a rule, returning a detailed execution breakdown (72cf392)</li> <li>collections: Added a collection info screen with details and history logs &amp; enhanced TypeORM Implementation, shifted running of migrations to the NestJS Process. (e260985)</li> <li>collections: Added an indicator to the collection media card that an item was added manually (12a4cb2)</li> <li>collections: Added exclusions to the collection detail screen (76d29ef)</li> <li>Implemented Winston logger for improved logging. Daily log rotation has been introduced, and logs are now stored under the /opt/data/logs directory (0e3ab51)</li> <li>rules:  Introduced the capability to import and export rules using YAML. Additionally, included a rule glossary in the documentation. (97c52d4)</li> <li>rules: Added new rule: Plex - [list] Labels (1c5a89a)</li> <li>rules: Added new variants of the existing collection rules for seasons and episodes, these will include collection data of the parent season/show as well (#813) (9d91b4a)</li> <li>rules: Introduced Radarr &amp; Sonarr rules to retrieve file locations (#814) (5963c74)</li> <li>Run application as non-root (006a122)</li> <li>settings: Added the ability to find and load available Plex servers from the settings menu (#811) (9c75917)</li> <li>ui: Added a version indicator (#807) (a126561)</li> <li>Upgraded to Yarn modern, improved the docker image size and added a contribution guide (#770) (6233b71)</li> </ul>"},{"location":"Changelog/#breaking-changes","title":"BREAKING CHANGES","text":"<ul> <li>The container now runs as an unprivileged user. It is essential to ensure that the exposed data directory is read/writeable by either the user specified in the 'user' directive or, if no directive is provided, by the default UID:GID 1000:1000.</li> <li>Previously, the UI port was set to port 80, which is privileged. This has been updated to non-privileged port 6246. Ensure to adjust your Dockerfile or docker run command to reflect this change.</li> </ul>"},{"location":"Changelog/#171-2024-01-06","title":"1.7.1 (2024-01-06)","text":""},{"location":"Changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>maintenance: Extended the maintenance task with an action to remove orphaned collection objects (f5826cc)</li> <li>plex: Fixed an issue where fetching Plex users would fail if connection to plex.tv failed (2458a8f)</li> <li>rules: Extended the Plex - rating rule (ef95481)</li> <li>rules: Fixed an issue where 'Plex - Present in amount of other collections' wouldn't work as expected (1c4accd)</li> <li>rules: Fixed an issue where an item would be stuck inside the internal collection when it was removed manually (1eae15f)</li> <li>rules: Fixed an issue where the \"Plex - Last episode added at\" rule order was affected by the library's Plex Episode Sorting setting (67299c4)</li> <li>rules: Resolved an issue where a nullpointer could occur when fetching playlists. (a0400b8)</li> </ul>"},{"location":"Changelog/#170-2023-12-21","title":"1.7.0 (2023-12-21)","text":""},{"location":"Changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>api: added a 10s cancellation signal for outgoing status API calls (3766b34)</li> <li>collection handler: Improved handling of movies without Tmdb ID's in Plex metadata. (9df2cd4)</li> <li>collectionHandler: Fixed an issue where a media item without a tvdb id could crash te server (c70bead)</li> <li>overview: Reworked the overview add popup. It's now possible to manually add &amp; remove seasons and episodes (99329b2)</li> <li>Plex: Add container-size header to API calls that missed it (069c281)</li> <li>rules: Fixed an issue where errors would be printed in the log when handling a show without a valid tvdb id (e2ad5e1)</li> <li>rules: Fixed an issue where Plex &amp; Overseerr would use different usernames when the Plex display name was edited or contains special characters (39c9529)</li> <li>settings: Resolved an issue where resetting the Plex authentication token would fail (17333e4)</li> <li>sonarr: Fixed an issue where fetching series by TVDB ID could fail (9866534)</li> <li>tmdb: Fixed an issue where an error could occur while trying to fetch the TMDB ID from an item (bc5b918)</li> </ul>"},{"location":"Changelog/#features_9","title":"Features","text":"<ul> <li>maintenance: Added a job that performs system maintenance tasks (15b0b19)</li> <li>overview: Reworked the exclusion feature to support season and episodes from the UI (ee59907)</li> </ul>"},{"location":"Changelog/#1610-2023-11-23","title":"1.6.10 (2023-11-23)","text":""},{"location":"Changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>settings: Fixed an issue where initial Radarr &amp; Sonarr configuration would crash the client (94dfcff)</li> <li>ui: Collection backdrop images now also leverage the configured caching option (d28b530)</li> <li>ui: Replace leftover Image components with CachedImage (c8d172f)</li> </ul>"},{"location":"Changelog/#169-2023-11-21","title":"1.6.9 (2023-11-21)","text":""},{"location":"Changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>api: Enhanced the external API caching mechanism to minimize redundant calls to external applications (478da57)</li> <li>rules: Added 2 rules for filtering Plex playlists (e6f6621)</li> <li>settings: Added the ability to configure arr's with base URL (5a94ac6)</li> <li>settings: Added the ability to configure the cron rule &amp; collection handler jobs (3121cf6)</li> <li>settings: Implemented the capability to customize the image caching behavior (126881b)</li> </ul>"},{"location":"Changelog/#168-2023-11-14","title":"1.6.8 (2023-11-14)","text":""},{"location":"Changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>rules: Added new rule 'Is part of latest aired/airing season' (2f78a54)</li> <li>rules: Alter the CONTAINS behavior so it now validates for partial matches (a04fec2)</li> <li>rules: Introduced the capability to detect partial text matches within text lists through the newly added 'Contains (Partial list match)' operator. (5ee4c69)</li> <li>rules: Introduced the capability to include text lists in custom values using JSON notation (aa0b229)</li> </ul>"},{"location":"Changelog/#167-2023-10-29","title":"1.6.7 (2023-10-29)","text":""},{"location":"Changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>settings: Fixed an issue where initial configuration could fail (3bec671)</li> <li>ui: Collection cards now scale correctly (829e8a1)</li> </ul>"},{"location":"Changelog/#166-2023-10-27","title":"1.6.6 (2023-10-27)","text":""},{"location":"Changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>rules: Added Sonarr rules: 'Has unaired episodes', 'Number of monitored seasons / episodes' &amp; 'Season has unaired episodes' (71c3b25)</li> <li>ui: Improve media card spacing on different screen sizes (8bd6f97)</li> <li>ui: The back button &amp; searchbar now have a glass background (6fcee47)</li> <li>ui: The header back button is now the global return button. And the temporary collection detail 'rewind' button is gone (1042de6)</li> </ul>"},{"location":"Changelog/#165-2023-10-24","title":"1.6.5 (2023-10-24)","text":""},{"location":"Changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>docker: Added all components to a supervisor so component crashes are mitigated (2ccc73d)</li> <li>rules: Fixed an issue where 'OR' would not work as expected when used in rules (instead of sections) (ef191b3)</li> <li>rules: Fixed an issue where switching first values of the same type would not keep the previous second value, and could cause a corrupt rule (e4fe5c1)</li> <li>rules: Fixed an issue where undefined return values during rule execution could crash the server (a152251)</li> <li>rules: Improved Sonarr log messages (c944e2d)</li> <li>rules: Improved the tvdb ID fallback mechanism for Sonarr rule values in case the tvdb ID is missing from Plex (abd3dc8)</li> <li>settings: Fixed an issue where uppercase characters in hostname settings could cause a failure in communication (a7f6351)</li> </ul>"},{"location":"Changelog/#164-2023-10-10","title":"1.6.4 (2023-10-10)","text":""},{"location":"Changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>rules: Added clarification to the 'show on home' flag during rule creation (2d4792d)</li> <li>rules: Fetching the watchHistory could throw an error when using the 'People that view show/season' rule (9a1a3d6)</li> <li>rules: Fixed some minor issues with NOT_CONTAINS &amp; NOT_EQUALS (fa08cbc)</li> </ul>"},{"location":"Changelog/#163-2023-10-05","title":"1.6.3 (2023-10-05)","text":""},{"location":"Changelog/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>rules: Fixed an issue where contains would not work as expected when comparing 2 lists (fd640e9)</li> </ul>"},{"location":"Changelog/#162-2023-09-22","title":"1.6.2 (2023-09-22)","text":""},{"location":"Changelog/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>collections: Added a 7 second timeout to the availability-sync trigger (a662eda)</li> <li>rules: Changed the default Overseer behavior to rely more on availability-sync. Added the option to trigger the old behavior (force remove requests) (39f890c)</li> <li>rules: Fixed an issue where not all rules would be available in the rule dropdown (5f589e6)</li> <li>rules: Improved 'amount of collections'  &amp; added the 'Collections media is present in' rule values (1ffb69b)</li> </ul>"},{"location":"Changelog/#161-2023-09-19","title":"1.6.1 (2023-09-19)","text":""},{"location":"Changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>rules: Fixed an issue where list exclusions would always be checked (9280100)</li> </ul>"},{"location":"Changelog/#160-2023-09-18","title":"1.6.0 (2023-09-18)","text":""},{"location":"Changelog/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>rules &amp; collections: Fixed rule &amp; collection handling issues when not all apps were configured (54a25d5)</li> <li>rules: Fix  a problem where Sonarr's date rules don't work as expected (d271fb0)</li> <li>rules: Fixed an issue where rule handling would fail when the Plex collection was manually removed. The collection will now get recreated. (65f551d)</li> <li>settings: Disabled configuration of apps while Plex is not yet configured (69def0c)</li> </ul>"},{"location":"Changelog/#features_10","title":"Features","text":"<ul> <li>rules: Added the possibility to add removed media to *arr's list exclusion (37b511a)</li> </ul>"},{"location":"Changelog/#150-2023-09-15","title":"1.5.0 (2023-09-15)","text":""},{"location":"Changelog/#features_11","title":"Features","text":"<ul> <li>rules: Add possibility to unmonitor shows &amp; movies without removing the files (f41c2e8)</li> <li>rules: added the ability to create rules for seasons &amp; episodes (#474) (b6e8a6c)</li> </ul>"},{"location":"Changelog/#142-2023-08-09","title":"1.4.2 (2023-08-09)","text":""},{"location":"Changelog/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>rules: Fixed an issue where 'all episodes seen by' would not always work correctly after PR #438 (9862b48)</li> </ul>"},{"location":"Changelog/#141-2023-08-01","title":"1.4.1 (2023-08-01)","text":""},{"location":"Changelog/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>plex-api: fixed a problem where the initial creation of a Plex collection would fail (a06f261)</li> <li>rules: fix a problem where \"all available episodes seen by\" not returned correctly when episode 1 of season 1 is not present (2d890cc)</li> <li>rules: Fix a problem where booleans would always default to 'true' when editing rules (bd6a68e)</li> <li>rules: Fix a problem where the sonarr action would always default to the first option when editing rules (811ef66)</li> <li>ui: fixed an issue where the collection's library picker would behave wrong (b6c5f83)</li> </ul>"},{"location":"Changelog/#140-2023-02-21","title":"1.4.0 (2023-02-21)","text":""},{"location":"Changelog/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>docs: fixed some documentation typo's (331261f)</li> <li>rules &amp; collections: improve error handling (9746045)</li> <li>rules: fix a problem where media couldn't get added anymore when something unexpected had happened to the Plex collection (f0dcea7)</li> </ul>"},{"location":"Changelog/#features_12","title":"Features","text":"<ul> <li>rules &amp; collections: Manual Plex collections now auto sync with Maintainerr (2a52436)</li> <li>rules: add the possibility to bypass Maintainerr's rule system. (b037d11)</li> </ul>"},{"location":"Changelog/#132-2023-01-21","title":"1.3.2 (2023-01-21)","text":""},{"location":"Changelog/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>app doesn't crash anymore on some raddar/sonnarr api errors (f1a25e1)</li> <li>collections: Add extra add / removal logs in case of failure (1d2a6e2)</li> <li>collection: Set machineId when needed if it wasn't set during boot (e.g. Plex wasn't available) (0189670)</li> <li>docs: added the need to disable Overseer's 'Enable CSRF Protection'  setting to the docs (256bd48)</li> <li>modal: fix a problem where a missing image symbol could be shown in some modals (4738732)</li> <li>overseerr: fix a problem where Overseerr media would only be cleared if a request exists (b31e68d)</li> <li>ui: collection background images are now correctly shown again (5b5e182)</li> </ul>"},{"location":"Changelog/#131-2022-11-19","title":"1.3.1 (2022-11-19)","text":""},{"location":"Changelog/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>collections: Fix an issue where collections might not be deleted when empty. This results in a failure to add new media (e3c6e1f)</li> <li>collections: fix log errors when trying to remove media from an already empty collection (b7f89f2)</li> </ul>"},{"location":"Changelog/#130-2022-09-30","title":"1.3.0 (2022-09-30)","text":""},{"location":"Changelog/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>community rules: Close modal after upload (473e732)</li> <li>community rules: Improve spacing on community upload modal (9cf575a)</li> <li>community rules: Only show rules matching the selected library type (c485a98)</li> <li>docs: docker compose yml spaces (5b18322)</li> </ul>"},{"location":"Changelog/#features_13","title":"Features","text":"<ul> <li>community rules: Add the possibility to load &amp; upload rules made by the community (6eebeac)</li> </ul>"},{"location":"Changelog/#123-2022-06-29","title":"1.2.3 (2022-06-29)","text":""},{"location":"Changelog/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>build: fix armv7 build issues (073378c)</li> </ul>"},{"location":"Changelog/#122-2022-06-10","title":"1.2.2 (2022-06-10)","text":""},{"location":"Changelog/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>ui: searchbar too wide after latest tailwind update (db0cd88)</li> </ul>"},{"location":"Changelog/#121-2022-05-09","title":"1.2.1 (2022-05-09)","text":""},{"location":"Changelog/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>rules: selecting boolean now auto sets value to 'true' (39b90f0)</li> <li>settings: obfuscate api keys (1ad9b0a)</li> <li>ui: hide navbar on initial load (1c551a2)</li> </ul>"},{"location":"Changelog/#120-2022-05-06","title":"1.2.0 (2022-05-06)","text":""},{"location":"Changelog/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>settings: fix missing plex auth key when saved after authentication (d64fa8c)</li> <li>ui: docs button on each setting page (a58cc85)</li> <li>ui: white background on input fields after tailwind upgrade (3c27c24)</li> </ul>"},{"location":"Changelog/#features_14","title":"Features","text":"<ul> <li>rules: add 'is requested in overseerr' option (2c3d469)</li> <li>rules: new boolean custom type (5a08fae)</li> </ul>"},{"location":"Changelog/#112-2022-05-04","title":"1.1.2 (2022-05-04)","text":""},{"location":"Changelog/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>migration: remove logic to move db from old location (1da6474)</li> <li>overview: suppress image not found error (7390a50)</li> </ul>"},{"location":"Changelog/#111-2022-05-04","title":"1.1.1 (2022-05-04)","text":""},{"location":"Changelog/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>docker: add ormconfig during build step (97d4411)</li> <li>docker: add sharp during build step (7887612)</li> <li>docker: fix sharp install during docker build (f54cb2a)</li> <li>docker: set timeout during yarn install to unlimited (71a61f8)</li> </ul>"},{"location":"Changelog/#110-2022-05-03","title":"1.1.0 (2022-05-03)","text":""},{"location":"Changelog/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>babel: inconsistency in .babelrc (f92fb5a)</li> <li>deps: remove semantic-release-docker-buildx dep (b97e13c)</li> <li>release: Remove buildx build steps from release (6c19466)</li> <li>Use force on npm install of UI (bf5f933)</li> </ul>"},{"location":"Changelog/#features_15","title":"Features","text":"<ul> <li>release: add multibranch build step (b993dd2)</li> </ul>"},{"location":"Collections/","title":"Collections","text":"<p>A collection is auto generated when defining a rule. A collection holds all media that either got picked up by the handling of the corresponding rule or got manually added.</p> <p>When the specified amount of days that media must live in the collection is passed, the collection handler job will perform the necessary cleanup actions.</p> Collection Handling <p>Collection handling is a batch process that runs every 12 hours. You can manually trigger it with the <code>Handle collection</code> button on the Collections page.</p>"},{"location":"Collections/#plex","title":"Plex","text":"<p>A collection will be reflected in Plex when it contains media. When no media is present, there's no use of having it in Plex. The Plex collection's title and description will be the same as the one in Maintainerr.</p> <p>If the <code>Show on home</code> option was checked, the Plex Collection will be shown on all Plex users home screen. This allows you to create, for instance, a 'Leaving soon' list.</p>"},{"location":"Collections/#manual-actions","title":"Manual actions","text":""},{"location":"Collections/#adding","title":"Adding","text":"<p>You can manually add media to a collection on the <code>Overview</code> page, by using the <code>Add</code> button on the media. Using the button will open a popup where you are able to pick the collection you wish to add the media to.</p> <p>Warning</p> <p>Please note that the first option selected is to remove media from all collections. However, if the media was added by the rule handler, it will be added again. If you wish to counter this behaviour, you must also exclude it from all collections.</p>"},{"location":"Collections/#removing","title":"Removing","text":"<p>As mentioned in the section above, you are able to remove media from all collections using the <code>Add</code> popup on the <code>Overview</code> page by choosing the <code>Remove from all collections</code> option.</p> <p>However, if you wish to just remove media from 1 collection it's easier to click on the collection's name on the <code>collections</code> page. This will show all media currently added to the collection. There you're able to remove specific media from the collection by using the <code>Remove</code> button.</p> <p>Note</p> <p>This will also exclude media from rule handling for this collection, so it won't be added again.</p>"},{"location":"Collections/#excluding","title":"Excluding","text":"<p>You're able to exclude media from all, or specific, collections by using the <code>Excl</code> button on the media's card from the <code>Overview</code> page. This will open a similar popup as adding media.</p> <p>Here you're able to Remove the media's current exclusions, exclude for all collections or exclude for a specific collection.</p> <p>When media has exclusions, an <code>Excl</code> badge will be shown on the top-right side of the card.</p>"},{"location":"Collections/#misc","title":"Misc","text":"<ul> <li> <p>By clicking on the collection's name you can see all media currently added to the collection. On the top-right side there'll be a number indicating the number of days before removal.</p> </li> <li> <p>Maintainerr will never remove the collection from Plex if you specified a manual collection.</p> </li> <li> <p>You could add media directly to the Plex collection within Plex. Maintainerr will sync Media with the Plex collection. (The Plex collection might not always be available in case you're using an automatic collection)</p> </li> </ul>"},{"location":"Common/","title":"Common Problems","text":"<p>Info</p> <p>These are not going to solve every problem and the suggested solutions might not correct your problem. If you have tried what is laid out here, and it still isn't working as expected. Please reach out on Discord.</p>"},{"location":"Common/#spinning-circle","title":"Spinning Circle","text":"<p>Q. I have installed Maintainerr but when I try to view it, all I can see on the page is a spinning circle.</p> <p>A. This is due to a permissions problem. The container runs by default as user 1000 and the data volume you have set does not have permissions set correctly for that user.</p> See The Fix? <ul> <li>check the logs (<code>docker logs -f maintainerr</code>) for permissions error</li> <li>run the command <code>sudo chown -R 1000:1000 &lt;host-directory for /opt/data&gt;</code></li> </ul>"},{"location":"Common/#webpage-is-stuck","title":"Webpage is stuck","text":"<p>Q. When I open the page for the first time I can click on things but nothing is happening.</p> <p>A. When the Maintainerr page loads up for the very first time, it is supposed to auto-direct to the Plex settings page. Sometimes it doesn't happen and the page looks stuck.</p> See The Fix? <p>refresh the page</p>"},{"location":"Common/#tvdbid-or-tmdbid-errors","title":"TVDBid or TMDBid errors","text":"<p>Q. There are a lot of entries in my logs about Maintainerr being unable to find the TVdbID or the TMDBid. They look similar to this. <code>[maintainerr] | 01/10/2024 14:20:52  [WARN] [SonarrGetterService] [TVDB] Failed to fetch tvdb id for 'Some TV Show'</code></p> <p>A. Most likely this is a problem with the Plex metadata attached to a particular item. Maintainerr looks to the Plex API for the TMDB or TVDB id to make sure we are matching with the EXACT same item in Sonarr/Radarr/Overseerr/Tautulli.</p> See The Fix? <p>Unfortunately at this time there isn't a great fix. The issue comes from inside Plex's metadata agent and what TMDB or TVDB it is assigning or can't find (didn't attach). We are actively looking into a solution but as of right now we don't have one. You could try to Fix Match the item in Plex but that isn't guaranteed to solve it.</p>"},{"location":"Common/#deleting-items","title":"Deleting Items","text":"<p>Q. I have set my <code>Take action after days</code> to 0, but nothing is being removed.</p> <p>A. Maintainerrs original design was to mirror Netflix's going away soon category. Maintainerr makes collections that show inside of Plex so that the user can be notified of an upcoming deletion, or Going Away Soon. This is unlikely to change as the intent is not to simply remove data, but provide the user a possible chance to watch something before it is removed, or simply know that it won't be available anymore.</p> See The Fix? <p>Simply put, 0 doesn't work. The minimum amount of time that you can set for this action is 1. There is no way to immediately delete items from inside Maintainerr.</p>"},{"location":"Common/#pre-made-rules","title":"Pre-made Rules","text":"<p>Q. Is there a set of pre-made rules somewhere that I can use as a starting point?</p> <p>A. There is a <code>Community</code> button when you are inside of a new rule. You can pull Community uploaded rules from there. There is a vote feature to show if a rule is good/popular, or if it doesn't work as expected. These rules are not tested or guaranteed to work as advertised. The Community is free to upload as they wish.</p> See The Fix? <p></p>"},{"location":"Common/#status-of-services","title":"Status of Services","text":"<p>Q. When I try to load the Community Rules I get a spinning circle and they never load. The Feature Requests page isn't loading.</p> <p>A. Some of these services are self-hosted and some are hosted elsewhere. There are downtimes, but we try to minimize them as much as possible.</p> See The Fix? <p>There is a website where you can see the status of our services. Service Monitoring Site</p>"},{"location":"Configuration/","title":"Configuration","text":"<p>All configuration is done inside the application, no extra config is required in files.  When you first access the webUI, you will be redirected to the settings page. If this doesn't happen, refresh the page.</p> <p>Info</p> <p>All Base URL settings are to be entered without the leading slash.</p> <ul> <li>Right: <code>tautulli</code></li> <li>Wrong: <code>/tautulli</code></li> </ul>"},{"location":"Configuration/#general","title":"General","text":"<p>These settings are OK for most installations.</p> Param Description Hostname The hostname or IP of the host Maintainerr runs on Api key Maintainerr's API key. Which has no use yet."},{"location":"Configuration/#plex","title":"Plex","text":"<p>This is the only required configuration. Without a valid Plex connection, Maintainerr won't be able to function.</p> <p>When using a local Plex instance, make sure your Plex's 'secure connections' network setting is set to 'preferred' instead of 'required'. If you'd like Maintainerr to communicate securely, you'll have to use your '*.plex.direct' URL as the hostname. You can copy this URL from Overseerr's configuration. Make sure you include 'https://'.</p> Param Description Name The name of your server Hostname or IP The domain name or local IP of the host your server runs on Port The port Plex runs on, default is 32400 Authentication Authenticate with your Plex server using a admin account <p>Tip</p> <p>The typical flow is to Authenticate with Plex -&gt; click on the refresh icon -&gt; choose your server from the dropdown menu -&gt; click on Save Changes -&gt; click on Test Saved.</p>"},{"location":"Configuration/#overseerr","title":"Overseerr","text":"<p>Overseerr's configuration is required to use its parameters in rules and to remove requests. </p> Param Description Hostname or IP The domain name or local IP of the host your server runs on Port The port Overseerr runs on Api key Overseerr API key, should be visible in the Overseerr settings"},{"location":"Configuration/#radarr","title":"Radarr","text":"<p>Radarr's configuration is required to use its parameters in rules and to remove or unmonitor movies.</p> Param Description Server Name A friendly name to help identify the server Hostname or IP The domain name or local IP of the host your server runs on Port The port Radarr runs on Base URL URL Base set in Radarr settings (if set) Api key Radarr API key, should be visible in the Radarr settings"},{"location":"Configuration/#sonarr","title":"Sonarr","text":"<p>Sonarr's configuration is required to use its parameters in rules and to remove or unmonitor shows.</p> Param Description Server Name A friendly name to help identify the server Hostname or IP The domain name or local IP of the host your server runs on Port The port Sonarr runs on Base URL URL Base set in Sonarr Settings (if set) Api key Sonarr API key, should be visible in the Sonarr settings"},{"location":"Configuration/#tautulli","title":"Tautulli","text":"<p>Tautulli's configuration is required to use its parameters in rules.</p> Param Description Hostname or IP The domain name or local IP of the host your server runs on Port The port Tautulli runs on Base URL HTTP Root set in Tautulli Settings (if set ) Api key Tautulli API key, should be visible in the Tautulli settings"},{"location":"Contributing/","title":"Contributing to Maintainerr","text":"<p>All help is welcome and greatly appreciated! If you would like to contribute to the project, the following instructions should get you started... (The below is specific to a Windows Development environment.)</p>"},{"location":"Contributing/#development","title":"Development","text":""},{"location":"Contributing/#tools-required","title":"Tools Required","text":"<ul> <li>HTML/Typescript/Javascript editor</li> <li>VSCode is recommended. Upon opening the project, a few extensions will be automatically recommended for install.</li> <li>NodeJS (Node 20.x or higher)</li> <li>Git</li> </ul>"},{"location":"Contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository to your own GitHub account and clone the fork to your local device:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/Maintainerr.git\ncd Maintainerr/\n</code></pre> <ol> <li>Add the remote <code>upstream</code>:</li> </ol> <pre><code>git remote add upstream https://github.com/jorenn92/Maintainerr.git\n</code></pre> <ol> <li>Create a new branch:</li> </ol> <pre><code>git checkout -b &lt;YOUR_NEW_BRANCH_NAME&gt; main\n</code></pre> <ul> <li> <p>It is recommended to give your branch a meaningful name, relevant to the feature or fix you are working on.</p> <ul> <li>Good examples:</li> <li><code>docs-docker-setup</code></li> <li><code>feat-new-system</code></li> <li><code>fix-title-cards</code></li> <li><code>ci-improve-build</code></li> <li>Bad examples:</li> <li><code>bug</code></li> <li><code>docs</code></li> <li><code>feature</code></li> <li><code>fix</code></li> <li><code>patch</code></li> </ul> </li> <li> <p>Activate the correct Yarn version. (Note: In order to run <code>corepack enable</code>, you will need to be running cmd or PowerShell as an Administrator.)</p> </li> </ul> <pre><code>corepack install\ncorepack enable\n</code></pre> <ol> <li>Install dependencies</li> </ol> <pre><code>yarn\n</code></pre> <ol> <li>As of Maintainerr v2.0, the project looks to ensure you have read/write permissions on the <code>data</code> directory. This <code>data</code> directory does not exist when you first clone your fork. Before running the below commands, create a folder inside of your main Maintainerr directory named <code>data</code>, and ensure it has full permissions to the <code>Everyone</code> user.</li> </ol> <pre><code>example -&gt;  C:\\Users\\You\\Documents\\GitRepos\\Maintainerr\\data\n</code></pre> <ol> <li>Run the development command</li> </ol> <pre><code>yarn dev\n</code></pre> <ul> <li> <p>If the build fails with PowerShell, try to use cmd instead.</p> </li> <li> <p>Make your code changes/improvements and test that they work as intended.</p> </li> <li> <p>Be sure to follow both the code and UI text guidelines.</p> </li> <li> <p>Should you need to update your fork (from any recent ORIGIN changes), you can do so by rebasing from <code>upstream</code>:</p> <pre><code>git fetch upstream\ngit rebase upstream/main\ngit push origin BRANCH_NAME -f\n</code></pre> </li> </ul>"},{"location":"Contributing/#contributing-code","title":"Contributing Code","text":"<ul> <li>If you are taking on an existing bug or feature ticket, please comment on the issue to avoid multiple people working on the same thing.</li> <li>All commits must follow Conventional Commits</li> <li>Pull requests with commits not following this standard will not be merged.</li> <li>Please make meaningful commits, or squash them prior to opening a pull request.</li> <li>Do not squash commits once people have begun reviewing your changes.</li> <li>Always rebase your commit to the latest <code>main</code> branch. Do not merge <code>main</code> into your branch.</li> <li>It is your responsibility to keep your branch up-to-date. Your work will not be merged unless it is rebased off the latest <code>main</code> branch.</li> <li>You can create a \"draft\" pull request early to get feedback on your work.</li> <li>Your code must be formatted correctly.</li> <li>We use Prettier to format our code base. It is recommended to have the Prettier extension installed in your editor and format on save.</li> <li>If you have questions or need help, you can reach out via Discussions or our Discord server.</li> </ul>"},{"location":"Contributing/#ui-text-style","title":"UI Text Style","text":"<p>When adding new UI text, please try to adhere to the following guidelines:</p> <ol> <li>Be concise and clear, and use as few words as possible to make your point.</li> <li>Use the Oxford comma where appropriate.</li> <li>Use the appropriate Unicode characters for ellipses, arrows, and other special characters/symbols.</li> <li>Capitalize proper nouns, such as Plex, Radarr, Sonarr, Telegram, Slack, Pushover, etc. Be sure to also use the official capitalization for any abbreviations; e.g., IMDb has a lowercase 'b', whereas TMDB and TheTVDB have a capital 'B'.</li> <li>Title case headings, button text, and form labels. Note that verbs such as \"is\" should be capitalized, whereas prepositions like \"from\" should be lowercase (unless as the first or last word of the string, in which case they are also capitalized).</li> <li>Capitalize the first word in validation error messages, dropdowns, and form \"tips.\" These strings should not end in punctuation.</li> <li>Ensure that toast notification strings are complete sentences ending in punctuation.</li> <li>If an additional description or \"tip\" is required for a form field, it should be styled using the global CSS class <code>label-tip</code>.</li> <li>In full sentences, abbreviations like \"info\" or \"auto\" should not be used in place of full words, unless referencing the name/label of a specific setting or option which has an abbreviation in its name.</li> <li>Do your best to check for spelling errors and grammatical mistakes.</li> <li>Do not misspell \"Maintainerr.\"</li> </ol>"},{"location":"Contributing/#attribution","title":"Attribution","text":"<p>This contribution guide was inspired by the Overseerr contribution guide.</p>"},{"location":"Glossary/","title":"Rule Glossary","text":"<p>This glossary describes the available rules that can be used in maintainerr. Each rule contains the media type it applies to, the key and the data type of the returned value.</p> <p>The key is used for identification in Yaml rule files.</p>"},{"location":"Glossary/#plex","title":"Plex","text":""},{"location":"Glossary/#date-added","title":"Date added","text":"<p>The date when the Plex item was added to the server.</p> <ul> <li>Key: Plex.addDate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#viewed-by-username","title":"Viewed by (username)","text":"<p>List of Plex usernames who have viewed the Plex item.</p> <ul> <li>Key: Plex.seenBy</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#release-date","title":"Release date","text":"<p>The release date of the Plex item.</p> <ul> <li>Key: Plex.releaseDate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#user-rating-scale-1-10","title":"User rating (scale 1-10)","text":"<p>The user rating of the Plex item on a scale of 1 to 10.</p> <p>Currently, only checks for the server owner's ratings.</p> <ul> <li>Key: Plex.rating_user</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#people-involved","title":"People involved","text":"<p>List of people involved in the Plex item. This includes actors, directors,..</p> <ul> <li>Key: Plex.people</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#times-viewed","title":"Times viewed","text":"<p>The number of times the Plex item has been viewed.</p> <ul> <li>Key: Plex.viewCount</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#present-in-amount-of-other-collections","title":"Present in amount of other collections","text":"<p>The number of collections the Plex item is present in. For seasons and episodes, This wil not include the collections of the parent season and show.</p> <ul> <li>Key: Plex.collections</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#last-view-date","title":"Last view date","text":"<p>The date when the Plex item was last viewed.</p> <ul> <li>Key: Plex.lastViewedAt</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#media-file-resolution-4k-1080","title":"Media file resolution (4k, 1080,..)","text":"<p>The resolutions of the media file associated with the Plex item. Possibilities include 4k, 1080, 720, 480, 360, 240.</p> <ul> <li>Key: Plex.fileVideoResolution</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#media-file-bitrate","title":"Media file bitrate","text":"<p>The bitrate of the media file associated with the Plex item.</p> <ul> <li>Key: Plex.fileBitrate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#media-file-codec","title":"Media file codec","text":"<p>The codec of the media file associated with the Plex item.</p> <ul> <li>Key: Plex.fileVideoCodec</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#list-of-genres-action-adventure","title":"List of genres (Action, Adventure,..)","text":"<p>List of genres associated with the Plex item.</p> <ul> <li>Key: Plex.genre</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#users-that-saw-all-available-episodes","title":"Users that saw all available episodes","text":"<p>List of users who have seen all available episodes of the Plex item. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_allEpisodesSeenBy</li> <li>Availability: shows, seasons</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#newest-episode-view-date","title":"Newest episode view date","text":"<p>The date when the newest episode of the Plex item was viewed. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_lastWatched</li> <li>Availability: shows, seasons</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#amount-of-available-episodes","title":"Amount of available episodes","text":"<p>The total number of episodes available for the Plex item. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_episodes</li> <li>Availability: shows, seasons</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#amount-of-watched-episodes","title":"Amount of watched episodes","text":"<p>The number of episodes that have been watched for the Plex item. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_viewedEpisodes</li> <li>Availability: shows, seasons</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#last-episode-added-at","title":"Last episode added at","text":"<p>The date when the last episode was added to the Plex item. This is not for the most recently aired episode of the show. Just the last episode that was added to Plex. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_lastEpisodeAddedAt</li> <li>Availability: shows, seasons</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#last-episode-aired-at","title":"Last episode aired at","text":"<p>The date when the newest episode added to Plex was originally aired. This is not for the most recently aired episode of the show. Just the last episode that was added to Plex.This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_lastEpisodeAiredAt</li> <li>Availability: shows, seasons</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#total-views","title":"Total views","text":"<p>The total number of views for the Plex item. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_amountOfViews</li> <li>Availability: shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#users-that-watch-the-showseasonepisode","title":"Users that watch the show/season/episode","text":"<p>List of users who watch the Plex item. This rule is only available for shows.</p> <ul> <li>Key: Plex.sw_watchers</li> <li>Availability: shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#collections-media-is-present-in-titles","title":"Collections media is present in (titles)","text":"<p>List of collections that the Plex item is present in. For seasons and episodes, This wil not include the collections of the parent season and show.</p> <ul> <li>Key: Plex.collection_names</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#present-in-amount-of-playlists","title":"Present in amount of playlists","text":"<p>The number of playlists the Plex item is present in.</p> <ul> <li>Key: Plex.playlists</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#playlists-media-is-present-in-titles","title":"Playlists media is present in (titles)","text":"<p>List of playlists that the Plex item is present in.</p> <ul> <li>Key: Plex.playlist_names</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#critics-rating-scale-1-10","title":"Critics rating (scale 1-10)","text":"<p>The critics rating of the Plex item on a scale of 1 to 10. This will mostly include the rotten tomatoes critics rating.</p> <ul> <li>Key: Plex.rating_critics</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#audience-rating-scale-1-10","title":"Audience rating (scale 1-10)","text":"<p>The audience rating of the Plex item on a scale of 1 to 10. This wil include the rotten tomatoes audience rating, or the imdb, tvdb, tmdb,.. rating. Depends on your server configuration.</p> <ul> <li>Key: Plex.rating_audience</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#labels","title":"Labels","text":"<p>List of labels associated with the Plex item.</p> <ul> <li>Key: Plex.labels</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#watchlisted-by-username","title":"Watchlisted by (username)","text":"<p>List of users that have the Plex item in their watchlist. This does not work with private watchlists. This rule is experimental and might not work for all use cases.</p> <ul> <li>Key: Plex.watchlist_isListedByUsers</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#present-in-amount-of-other-collections-incl-parents","title":"Present in amount of other collections (incl. parents)","text":"<p>The number of collections the Plex item is present in. This will also include collections the parent season and/or episode is present in.</p> <ul> <li>Key: Plex.sw_collections_including_parent</li> <li>Availability: seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#collections-media-is-present-in-titles-incl-parents","title":"Collections media is present in (titles) (incl. parents)","text":"<p>List of collections that the Plex item is present in. This will also include collections the parent season and/or episode is present in.</p> <ul> <li>Key: Plex.sw_collection_names_including_parent</li> <li>Availability: seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#radarr","title":"Radarr","text":""},{"location":"Glossary/#date-added_1","title":"Date added","text":"<p>The date when the Radarr item was added.</p> <ul> <li>Key: Radarr.addDate</li> <li>Availability: movies</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#tags-text-if-1-otherwise-list","title":"Tags (Text if 1, otherwise list)","text":"<p>List of tags associated with the Radarr item.</p> <ul> <li>Key: Radarr.tags</li> <li>Availability: movies</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#quality-profile","title":"Quality profile","text":"<p>The quality profile of the Radarr item.</p> <ul> <li>Key: Radarr.profile</li> <li>Availability: movies</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#release-date_1","title":"Release date","text":"<p>The release date of the Radarr item.</p> <ul> <li>Key: Radarr.releaseDate</li> <li>Availability: movies</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#is-monitored","title":"Is monitored","text":"<p>Indicates whether the Radarr item is monitored.</p> <ul> <li>Key: Radarr.monitored</li> <li>Availability: movies</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#in-cinemas-date","title":"In cinemas date","text":"<p>The date when the Radarr item was released in cinemas.</p> <ul> <li>Key: Radarr.inCinemas</li> <li>Availability: movies</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#file-size-in-mb","title":"File - size in MB","text":"<p>The size of the file associated with the Radarr item in megabytes.</p> <ul> <li>Key: Radarr.fileSize</li> <li>Availability: movies</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#file-audio-channels","title":"File - audio channels","text":"<p>List of audio channels of the file associated with the Radarr item.</p> <ul> <li>Key: Radarr.fileAudioChannels</li> <li>Availability: movies</li> <li>Type: number[]</li> </ul>"},{"location":"Glossary/#file-quality-2160-1080","title":"File - quality (2160, 1080,..)","text":"<p>List of quality levels of the file associated with the Radarr item.</p> <ul> <li>Key: Radarr.fileQuality</li> <li>Availability: movies</li> <li>Type: number[]</li> </ul>"},{"location":"Glossary/#file-download-date","title":"File - download date","text":"<p>The date when the file associated with the Radarr item was downloaded.</p> <ul> <li>Key: Radarr.fileDate</li> <li>Availability: movies</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#file-runtime-in-minutes","title":"File - runtime in minutes","text":"<p>The runtime of the file associated with the Radarr item in minutes.</p> <ul> <li>Key: Radarr.runTime</li> <li>Availability: movies</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#file-file-path","title":"File - file path","text":"<p>The path of the file associated with the Radarr item. When using Docker, this will be the path inside the container.</p> <ul> <li>Key: Radarr.filePath</li> <li>Availability: movies</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#sonarr","title":"Sonarr","text":""},{"location":"Glossary/#date-added_2","title":"Date added","text":"<p>The date when the Sonarr item was added.</p> <ul> <li>Key: Sonarr.addDate</li> <li>Availability: shows</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#files-disk-size-in-mb","title":"Files - Disk size in MB","text":"<p>The disk size of the entire show, season or episode in megabytes.</p> <ul> <li>Key: Sonarr.diskSizeEntireShow</li> <li>Availability: shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#tags-show","title":"Tags (show)","text":"<p>List of tags associated with the Sonarr item.</p> <ul> <li>Key: Sonarr.tags</li> <li>Availability: shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#quality-profile-id","title":"Quality profile ID","text":"<p>The quality profile ID of the Sonarr item.</p> <ul> <li>Key: Sonarr.qualityProfileId</li> <li>Availability: shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#first-air-date","title":"First air date","text":"<p>The first air date of the Sonarr item.</p> <ul> <li>Key: Sonarr.firstAirDate</li> <li>Availability: shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#number-of-seasons-episodes-also-unavailable","title":"Number of seasons / episodes (also unavailable)","text":"<p>The number of seasons or episodes for the Sonarr item. This will also count the unavailable episodes.</p> <ul> <li>Key: Sonarr.seasons</li> <li>Availability: shows, seasons</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#status-continuing-ended","title":"Status (continuing, ended)","text":"<p>The status of the Sonarr item.</p> <ul> <li>Key: Sonarr.status</li> <li>Availability: shows</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#show-ended","title":"Show ended","text":"<p>Indicates whether the Sonarr show has ended.</p> <ul> <li>Key: Sonarr.ended</li> <li>Availability: shows</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#is-monitored_1","title":"Is monitored","text":"<p>Indicates whether the Sonarr item is monitored.</p> <ul> <li>Key: Sonarr.monitored</li> <li>Availability: shows, seasons, episodes</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#has-unaired-episodes","title":"Has unaired episodes","text":"<p>Indicates whether the Sonarr show/season has unaired episodes.</p> <ul> <li>Key: Sonarr.unaired_episodes</li> <li>Availability: shows, seasons, episodes</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#number-of-monitored-seasons-episodes","title":"Number of monitored seasons / episodes","text":"<p>The number of monitored seasons or episodes for the Sonarr item.</p> <ul> <li>Key: Sonarr.seasons_monitored</li> <li>Availability: shows, seasons</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#season-has-unaired-episodes","title":"Season has unaired episodes","text":"<p>Indicates whether the Sonarr season has unaired episodes.</p> <ul> <li>Key: Sonarr.unaired_episodes_season</li> <li>Availability: episodes</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#is-part-of-latest-airedairing-season","title":"Is (part of) latest aired/airing season","text":"<p>Indicates whether the Sonarr item is part of the latest aired or airing season.</p> <ul> <li>Key: Sonarr.part_of_latest_season</li> <li>Availability: seasons, episodes</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#base-file-path","title":"Base file path","text":"<p>The base path on disk of the file associated with the Radarr item. When using Docker, this will be the path inside the container.</p> <ul> <li>Key: Sonarr.filePath</li> <li>Availability: movies, seasons, episodes</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#overseerr","title":"Overseerr","text":""},{"location":"Glossary/#requested-by-user-plex-or-local-username","title":"Requested by user (Plex or local username)","text":"<p>The username of the Plex user who requested the media in Overseerr. If a local user requested it, this will be the local username.</p> <ul> <li>Key: Overseerr.addUser</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text</li> </ul>"},{"location":"Glossary/#request-date","title":"Request date","text":"<p>The date when the media was requested in Overseerr.</p> <ul> <li>Key: Overseerr.requestDate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#releaseair-date","title":"Release/air date","text":"<p>The release or air date of the media in Overseerr.</p> <ul> <li>Key: Overseerr.releaseDate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#approval-date","title":"Approval date","text":"<p>The date when the media request was approved in Overseerr.</p> <ul> <li>Key: Overseerr.approvalDate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#media-downloaded-date","title":"Media downloaded date","text":"<p>The date when the media was downloaded in Overseerr.</p> <ul> <li>Key: Overseerr.mediaAddedAt</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#amount-of-requests","title":"Amount of requests","text":"<p>The total number of requests for the media in Overseerr.</p> <ul> <li>Key: Overseerr.amountRequested</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#requested-in-overseerr","title":"Requested in Overseerr","text":"<p>Indicates whether the media was requested in Overseerr.</p> <ul> <li>Key: Overseerr.isRequested</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: boolean</li> </ul>"},{"location":"Glossary/#tautulli","title":"Tautulli","text":""},{"location":"Glossary/#viewed-by-username_1","title":"Viewed by (username)","text":"<p>List of Plex usernames who have viewed (according to Tautulli) the Plex item. The percentage for the item to be considered as viewed is configured in the Tautulli settings.</p> <ul> <li>Key: Tautulli.seenBy</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#users-that-saw-all-available-episodes_1","title":"Users that saw all available episodes","text":"<p>List of users who have seen (according to Tautulli) all available episodes of the Plex item. The percentage for an episode to be considered as viewed is configured in the Tautulli settings.</p> <ul> <li>Key: Tautulli.sw_allEpisodesSeenBy</li> <li>Availability: shows, seasons</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#users-that-watch-the-showseasonepisode_1","title":"Users that watch the show/season/episode","text":"<p>List of users who watch (according to Tautulli) the Plex item. The percentage for an episode to be considered as viewed is configured in the Tautulli settings. This rule is only available for shows.</p> <ul> <li>Key: Tautulli.sw_watchers</li> <li>Availability: shows, seasons, episodes</li> <li>Type: text[]</li> </ul>"},{"location":"Glossary/#date-added_3","title":"Date added","text":"<p>The date when the Plex item was added to the server.</p> <ul> <li>Key: Tautulli.addDate</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#times-viewed_1","title":"Times viewed","text":"<p>The number of times the Plex item has been viewed (according to Tautulli). The percentage for the Plex item to be considered as viewed is configured in the Tautulli settings.</p> <ul> <li>Key: Tautulli.viewCount</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#total-views_1","title":"Total views","text":"<p>The total number of views (according to Tautulli) for the Plex item. The percentage for an episode to be considered as viewed is configured in the Tautulli settings. This rule is only available for shows.</p> <ul> <li>Key: Tautulli.sw_amountOfViews</li> <li>Availability: shows, seasons, episodes</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#last-view-date_1","title":"Last view date","text":"<p>The date when the Plex item was last viewed (according to Tautulli). The percentage for the Plex item to be considered as viewed is configured in the Tautulli settings.</p> <ul> <li>Key: Tautulli.lastViewedAt</li> <li>Availability: movies, shows, seasons, episodes</li> <li>Type: date</li> </ul>"},{"location":"Glossary/#amount-of-watched-episodes_1","title":"Amount of watched episodes","text":"<p>The number of episodes that have been watched (according to Tautulli) for the Plex item. The percentage for an episode to be considered as viewed is configured in the Tautulli settings. This rule is only available for shows.</p> <ul> <li>Key: Tautulli.sw_viewedEpisodes</li> <li>Availability: shows, seasons</li> <li>Type: number</li> </ul>"},{"location":"Glossary/#newest-episode-view-date_1","title":"Newest episode view date","text":"<p>The date when the newest episode of the Plex item was viewed (according to Tautulli). The percentage for an episode to be considered as viewed is configured in the Tautulli settings. This rule is only available for shows.</p> <ul> <li>Key: Tautulli.sw_lastWatched</li> <li>Availability: shows, seasons</li> <li>Type: date</li> </ul>"},{"location":"Installation/","title":"Installation","text":"<p>Docker is Maintainerr's supported method of installation.</p> <p>Images for amd64 &amp; arm64 are available under <code>jorenn92/maintainerr</code> and <code>ghcr.io/jorenn92/maintainerr</code>. The containers data location is set as /opt/data. A Docker volume is strongly encouraged to persist your configuration.</p> <p>Info</p> <p>You have the  option  to define a User and Group ID for running the container. Maintainerr will utilize the user:group setting as it's running user (inside the container), and any files it generates within your host data volume will be associated with this designated user and group. If not explicitly specified, the default UID:GID is set to 1000:1000. See Run and Compose below for examples.</p> <p>Tip</p> <p>Make sure your data volume is read/writeable by this UID:GID!</p> <p>It is possible that you will need to change permissions on the host's data directory.</p> <p><code>chown -R 1000:1000 /opt/data</code>  This is a \"change owner\" command that changes the owner of <code>/opt/data</code> to <code>1000:1000</code>.</p> <p>Setting the host data directory largely depends on how you are installing Maintainerr. If using Docker, these are the two places where you would set the host data directory, depending on your method.</p> Run CommandCompose <p><code>-v &lt;your host location&gt;:/opt/data \\</code></p> <pre><code>volumes:\n  - type: bind\n    source: &lt;your host location&gt;\n    target: /opt/data\n</code></pre>"},{"location":"Installation/#run","title":"Run","text":"<pre><code>    docker run -d \\\n    --name maintainerr \\\n    -e TZ=Europe/Brussels \\\n    -v &lt;yourhostlocation&gt;:/opt/data \\ # (3)!\n    -u 1000:1000 \\\n    -p 6246:6246 \\ # (1)!\n    --restart unless-stopped \\\n    ghcr.io/jorenn92/maintainerr:latest # (2)!\n</code></pre> <ol> <li>This is defined as <code>host:container</code>.</li> <li>For this line, you could also use <code>jorenn92/maintainerr</code> instead, to use the DockerHub image.</li> <li>In Docker containers, you are able to bind a host directory to a directory inside the container. This allows for persistent data when a container is restarted or reset.</li> </ol> Development Versions <p>Whilst the development version contains all of the latest features and bug fixes, there is a chance things will break. By using a development version you must be willing to report any issues you come across to the development team and provide them as much information as possible to help us resolve the issue.</p> <p>Changing from a development version to a stable version is not supported.</p> <ul> <li><code>ghcr.io/jorenn92/maintainerr:main</code> for the develop branch</li> <li><code>jorenn92/maintainerr:develop</code> for the Docker Hub development image.</li> </ul>"},{"location":"Installation/#updating","title":"Updating","text":"<p>Stop and remove the existing container:</p> <pre><code>docker rm -f maintainerr\n</code></pre> <p>Pull the latest image:</p> <pre><code>docker pull ghcr.io/jorenn92/maintainerr:latest\n</code></pre> <p>Finally, run the container with the same parameters you originally used to create/start the container.</p> <p>You may alternatively use a third-party updating mechanism, such as Watchtower, to keep Maintainerr up-to-date automatically.</p>"},{"location":"Installation/#enabling-debug-logging","title":"Enabling Debug Logging","text":"<p>To produce some more informational logging output, either the whole time Maintainerr is running or while you are troubleshooting a specific issue, we recommend turning on debug logging.</p> <pre><code>    docker run -d \\\n    --name maintainerr \\\n    -e TZ=Europe/Brussels \\\n    -e DEBUG=true\\\n    -v &lt;yourhostlocation&gt;:/opt/data \\\n    -u 1000:1000 \\\n    -p 6246:6246 \\\n    --restart unless-stopped \\\n    ghcr.io/jorenn92/maintainerr:latest\n</code></pre>"},{"location":"Installation/#compose","title":"Compose","text":"<p>Define the Maintainerr service in your docker-compose.yml as follows.</p> <pre><code>services:\n    maintainerr:\n        image: ghcr.io/jorenn92/maintainerr:latest # (1)!\n        user: 1000:1000\n        volumes:\n          - type: bind\n            source: &lt;your host location&gt; # (3)!\n            target: /opt/data\n        environment:\n          - TZ=Europe/Brussels\n   #      - DEBUG=true # uncomment (remove the hashtag) to enable debug logs\n        ports:\n          - 6246:6246 # (2)!\n        restart: unless-stopped\n</code></pre> <ol> <li>For this line, you could also use <code>jorenn92/maintainerr</code> instead, to use the DockerHub image. The <code>latest</code> tag at the end is not required, unless you want to specify which tag to use.</li> <li>This is defined as <code>host:container</code>.</li> <li>In Docker containers, you are able to bind a host directory to a directory inside the container. This allows for persistent data when a container is restarted or reset.</li> </ol> Development Versions <p>Whilst the development version contains all of the latest features and bug fixes, there is a chance things will break. By using a development version you must be willing to report any issues you come across to the development team and provide them as much information as possible to help us resolve the issue.</p> <p>Changing from a development version to a stable version is not supported.</p> <ul> <li><code>ghcr.io/jorenn92/maintainerr:main</code> for the develop branch</li> <li><code>jorenn92/maintainerr:develop</code> for the Docker Hub development image.</li> </ul> <p>Save your docker-compose.yml file. Then, while in the directory where your docker-compose file exists, start all services defined in your Compose file:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"Installation/#updating_1","title":"Updating","text":"<p>Pull the latest image:</p> <pre><code>docker compose pull\n</code></pre> <p>Then, restart all services defined in the Compose file:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"Installation/#enabling-debug-logging_1","title":"Enabling Debug Logging","text":"<p>To produce some more informational logging output, either the whole time Maintainerr is running or while you are troubleshooting a specific issue, we recommend turning on debug logging.</p> <pre><code>services:\n    maintainerr:\n        image: ghcr.io/jorenn92/maintainerr:latest\n        user: 1000:1000\n        volumes:\n          - type: bind\n            source: &lt;your host location&gt;\n            target: /opt/data\n        environment:\n          - TZ=Europe/Brussels\n          - DEBUG=true\n        ports:\n          - 6246:6246\n        restart: unless-stopped\n</code></pre>"},{"location":"Installation/#environment-variables","title":"Environment Variables","text":"<p>A list of all available environment variables are below. No other env variables are officially supported by Maintainerr. These are added either into the compose file or your docker run command.</p> Variable Default Value Description TZ host timezone Controls date formatting in logs. DEBUG false Toggles debug logging. UI_HOSTNAME 0.0.0.0 The listen host of the UI web server. Can be set to :: for IPv6. UI_PORT 6246 The listen port of the UI web server. API_PORT 3001 The listen port of the API server. BASE_PATH If reverse proxying with a subfolder you'll want to set this. Must be in the format of <code>/subfolder</code>"},{"location":"Introduction/","title":"Introduction","text":"<p>Maintainerr makes managing your media easy. No longer do you have to worry about your precious hard drive space being taken up by Movies and TVShows, that aren't even being watched.</p> <p>Beta</p> <p>Maintainerr is beta software, please report any bugs or issues.</p>"},{"location":"Introduction/#features","title":"Features","text":"<ul> <li>Make Plex collections from a specific set of rules, defined by you.</li> <li>Configure those rules to match your needs. (i.e. <code>Plex last viewed 30 days ago</code>)</li> <li>See an overview of your Plex library contents.</li> <li>Manually add an item to one of the above mentioned collections.</li> <li>Manually exclude an item from one of the collections, even if it meets the rule criteria.</li> <li>Show your new collection on the Plex Home screen.</li> <li>Set a number of days the collection will exist before it is deleted.</li> <li>Set Radarr and Sonarr to either remove or unmonitor media in the collection.</li> <li>Auto clear requests from Overseerr</li> <li>Remove media from disk</li> </ul> <p>Maintainerr supports rules across these apps :</p> <ul> <li>Plex</li> <li>Overseerr</li> <li>Radarr</li> <li>Sonarr</li> <li>Tautulli</li> </ul>"},{"location":"ReverseProxy/","title":"Reverse Proxy","text":"<p>We have tried to outline some working configurations. At the very least, these should get you started in the right direction.</p>"},{"location":"ReverseProxy/#nginx","title":"NGINX","text":"SwagSubdomain <p>The LinuxServer.io SWAG project comes built in with many pre-configured reverse proxy options <sup>1</sup>. One of them is for Maintainerr, and the file is named <code>maintainerr.subdomain.conf.sample</code>. You simply need to ensure that your container is named Maintainerr and that you have a DNS CNAME set for the Maintainerr subdomain you are going to use. Need More Information?</p> <p>If your container is not named Maintainerr, but you still want to use their pre-configured config file, you will need to change this line, <code>set $upstream_app maintainerr;</code>.</p> <p>If you don't want your address to be <code>maintainerr.example.com</code>, you will need to change this line, <code>server_name maintainerr.*;</code>.</p> <pre><code>server {\n    listen 80;\n    server_name maintainerr.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name maintainerr.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/maintainerr.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/maintainerr.example.com/privkey.pem;\n\n    proxy_set_header Referer $http_referer;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Real-Port $remote_port;\n    proxy_set_header X-Forwarded-Host $host:$remote_port;\n    proxy_set_header X-Forwarded-Server $host;\n    proxy_set_header X-Forwarded-Port $remote_port;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n\n    location / {\n        proxy_pass http://&lt;maintainerr_url&gt;:6246;\n    }\n}\n</code></pre> <ol> <li> <p>Ensure that your SWAG version is up to date, as the older versions have pre-2.0 Maintainerr setup.\u00a0\u21a9</p> </li> </ol>"},{"location":"Rules/","title":"Rules","text":"<p>Rules are the engine of Maintainerr. Media will be tested against the rule parameters and added to a collection, if they are a match. When media exists in the collection for a specified amount of time, they'll be deleted from disk &amp; external applications.</p> <p>Once you complete and save your rule, Maintainerr will generate a collection. The collection will only be visible/synced to Plex if it contains media.</p> Rule Handling <p>Rule handling is a batch process that runs every 8 hours. You can manually trigger it with the <code>Run rules</code> button on the 'rules' page.</p>"},{"location":"Rules/#creating-rules","title":"Creating rules","text":""},{"location":"Rules/#general","title":"General","text":"<p>General info about the rule. Some of the information specified here will be shown on the generated collection. In here you also specify how to handle the collection.</p> Parameter Description Name The Rule and Plex Collection name Description Description of the Rule. This is also used as the Collection's description Library Which Plex library's media to use Media type The type of TV media the rules will apply to, either the entire show, only seasons or only episodes Radarr server The server that Radarr specific rules and actions will be applied to Radarr action Unmonitor or delete movies from Radarr Sonarr server The server that Sonarr specific rules and actions will be applied to Sonarr action Unmonitor or delete series from Sonarr Plex action Delete media from Plex directly. Only applicable when no *arr server is selected. Active If inactive, the rule won't run Show on library recommended Show the rule's collection on the Plex library recommended screen Show on home Show the rule's collection on the Plex home screen Add list exclusions Prevent *arr import lists from re-adding media that has been removed by Maintainerr Media deleted after days Amount of days media will live in the collection before deletion Use rules Disable the rule engine, in case you want to add media manually Force reset Overseerr record Force resets the Overseerr record by deleting any requests instead of relying on availability-sync. 'Enable CSRF Protection' needs to be disabled in Overseer's settings for this to work. <sup>1</sup> Custom collection Use a manual collection. Media will sync from Plex to Maintainerr. Maintainerr will never remove this collection from Plex Custom collection name The name of the manual collection to use <sup>2</sup>"},{"location":"Rules/#tv-media-type","title":"TV media type","text":"<p>With the Media type parameter you're able to specify the type of media that should be used for a TV library. This allows to run rules on either a selection of shows, seasons or episodes.</p> <p>For instance, this makes it possible to create rule groups that select &amp; delete old/watched seasons of a tv show, without removing the newer seasons.</p> Info <ul> <li> <p>Because you can't mix media types on a Plex collection, Maintainerr also doesn't allow the use of multiple types on a rule group / collection.</p> </li> <li> <p>Executing rules on episodes takes a lot longer than shows &amp; seasons because Maintainerr has to sift through more data.</p> </li> </ul>"},{"location":"Rules/#disabling-rules-manual-collections","title":"Disabling rules &amp; manual collections","text":"<p>In case you want to manage the collection manually, or with another program, there's the possibility to disable Maintainerr's collection system by specifying a manual collection. Maintainerr will sync all media added/removed from the Plex collection into its internal collection.</p> <p>Warning</p> <p>If media is excluded in Maintainerr, but is added manually to the Plex collection, the exclude will be ignored.</p> <p>Additionally, you can disable the rule system by unchecking the use rules checkbox.</p>"},{"location":"Rules/#adding-rules","title":"Adding rules","text":"<p>Adding a rule is done by using the Add button next to a section title. If the button is not available, it means your current rule isn't finished yet.</p> <p>A rule consists of at least 4 values. If the <code>second value</code> contains a custom value, a <code>custom value</code> parameter will also pop up.</p> <p>Starting from the second rule or section, a <code>operator</code> parameter is also required. Here you must specify the action to take on the results of the previous rule.</p> Param Description Operator Action to take on the previous rule or section First value The first value to compare with Action The comparable action to take Second value The second value to compare with Custom value A custom value input"},{"location":"Rules/#sections","title":"Sections","text":"<p>A section is a group of rules. What happens to the result of a section depends on the choice of Operator in the section's first rule.</p>"},{"location":"Rules/#adding-new-sections","title":"Adding new sections","text":"<p>The New section button, at the bottom of the form, is only available if all rules are completed.</p>"},{"location":"Rules/#operators","title":"Operators","text":"<p>There are 2 operator choices, both explained below. The choice of operator defines what happens to the result of each section or rule.</p>"},{"location":"Rules/#and","title":"AND","text":"<p>Using this operator, the rule will run against the result of the previous rule (or section). The output of the rule will then be passed on to the next rule.</p>"},{"location":"Rules/#or","title":"OR","text":"<p>Using this operator, the rule will start off with all media and add its result to the previous rule (or section) result. The output of the rule will then be passed on to the next rule.</p>"},{"location":"Rules/#actions","title":"Actions","text":"<p>The action defines the way the <code>first value</code> and <code>second value</code> will be compared. The available actions are dependent on the type of the <code>first value</code></p> Action Description Types bigger Is the <code>first value</code> bigger than the <code>second value</code> ? number smaller Is the <code>first value</code> smaller than the <code>second value</code> ? number contains Does the <code>first value</code> contain the <code>second value</code>? Lists will confirm the existence of an exact match within the <code>first value</code> list number, text contains (partial) Does the <code>first value</code> contain the <code>second value</code> ? Lists will confirm the existence of a partial match within the <code>first value</code> list number, text not contains Does the <code>first value</code> lack the <code>second value</code>? Lists will indicate the absence of an exact match within the <code>first value</code> list. number, text not contains (partial) Does the <code>first value</code> lack the <code>second value</code> ? Lists will indicate the absence of a partial match within the <code>first value</code> list. number, text equals Is the <code>first value</code> equal to the <code>second value</code> ? number, text, date not equals Is the <code>first value</code> unequal to the <code>second value</code> ? number, text, date before Does the <code>first value</code> occur before the <code>second value</code> ? date after Does the <code>first value</code> occur after the <code>second value</code> ? date in last Does the <code>first value</code> occur in the last x amount of days ? date in next Does the <code>first value</code> occur in the next x amount of days ? date <p>The difference between Contains/Contains (exact) and Contains (partial) is only apparent with list values. When comparing a text list, Contains (exact) will only return true if the <code>second value</code> exactly matches any value in the <code>first value</code> list. Contains (partial) will return true if the <code>first value</code> list has a value that partially matches any value in the <code>second value</code> list.</p>"},{"location":"Rules/#list-examples","title":"List Examples","text":"True `Contains (partial)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\nsecondValue:\n  - use\n  - ser\n  - ser3\n  - user\n  - ser1\n  - er3\n</code></pre> True `Contains (partial)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\nsecondValue:\n  - user1\n  - user2\n  - user3\n  - user5\n\u2800\n\u2800\n</code></pre> False `Contains (partial)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\nsecondValue:\n  - friend\n  - james\n  - wilhelm\n  - frank\n</code></pre> True `Contains (exact)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\nsecondValue:\n  - user1\n  - user2\n  - user5\n\u2800\n</code></pre> True `Contains (exact)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\n  - user7\nsecondValue:\n  - user1\n  - user2\n  - user7\n</code></pre> True `Contains (exact)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\nsecondValue:\n  - user1\n  - user5\n  - user8\n\u2800\n</code></pre> False `Contains (exact)`<pre><code>firstValue:\n  - user1\n  - user2\n  - user3\nsecondValue:\n  - use\n  - friend\n  - 1\n  - 2\n  - 3\n</code></pre>"},{"location":"Rules/#custom-values","title":"Custom values","text":"<p>The <code>second value</code> field allows some custom values. The available custom values are dependent on the type of <code>first value</code>.</p> Action Description Types Custom days This behavior depends on the selected <code>action</code>. In case of <code>in_last</code> or <code>in_next</code>, this translates to 'in the last (or next) x days'. in case of <code>before</code> the value will be translated to the current date subtracted by the amount of <code>custom days</code>. In all other cases, the amount of days will be added to the current date date Custom date Takes a specific date date Custom number Takes a specific number number Custom text Takes a specific text text Custom text (list) Takes a list in JSON format [\"Jef\", \"Frank\", \"Wilhelm\"] <ol> <li> <p>This is the old method of telling Overseerr that something has been removed. The default method now, is to tell Overseerr to initiate an <code>Availability Sync</code>, through its API. This happens automatically at the end of the collection handler job.\u00a0\u21a9</p> </li> <li> <p>Only shown and needed when the Custom Collection checkbox is checked.\u00a0\u21a9</p> </li> </ol>"},{"location":"Test-Media/","title":"Test Media","text":"<p>Maintainerr comes with a built-in feature to test your ruleset against your media, and display the results to you. This can be done without ever running a rule or creating collections in Plex. Sometimes, it is hard for you to determine why something was or wasn't added to a collection. Using the Test Media feature can be an extremely useful tool in helping you figure out what is going on.</p>"},{"location":"Test-Media/#test-media-button","title":"Test Media button","text":"<p>The first thing you must do, in order to use this function, is to create a rule. More on that can be found in the Rules documentation, as well as in the Walkthroughs.</p> <p> Rules Walkthroughs </p> <p>After creating your rule, and saving it, you will be brought back to the Rules page. Now you want to click on the Collections tab on the left menu. Here you will be shown all of your collections.</p> <p>Click on the name of the collection that you want to test rules for. You will be taken to the Collection's page. Here you will see the Test Media button at the top left. You can also see any exclusions that you may have setup for this collection, as well as information regarding the collection items.</p> <p></p>"},{"location":"Test-Media/#test-media-popup","title":"Test Media popup","text":"<p>Depending on what type of library/media this collection is for, you will have different options at the top of this popup.</p> Item Value Media Name of a Movie or TVShow that you want to test Season Select which season you want to test (if TV) Episode Select the episode you want to test (if TV) Output The test results in YAML format"},{"location":"Test-Media/#test-your-media","title":"Test your media","text":"<p>When you first come to the Test Media page the media field will say <code>Start typing...</code>. This is where you will start typing the name of a Movie or TVShow. As you type there will be options that popup (from your library), similar to how Google search works. </p> <p>You can search for any Movie or any TVShow, regardless of what library the rule is tied to, as long as the type is the same. You can't search for a Movie if the type of library is TV. </p> <p>Select the item, choose the season and episode if applicable, then click on test at the bottom.</p>"},{"location":"Test-Media/#test-output","title":"Test output","text":"<p>Below is an example of your test's output.</p> <pre><code>- plexId: 73061\n  result: false\n  sectionResults:\n    - id: 0\n      result: false\n      ruleResults:\n        - operator: OR\n          action: contains_partial\n          firstValueName: Overseerr - Requested by user (Plex or local username)\n          firstValue: null\n          secondValueName: text\n          secondValue: ydkmlt84\n          result: false\n</code></pre>"},{"location":"Test-Media/#test-output-breakdown","title":"Test Output breakdown","text":"this is the plexid of the tested item, and the overall result<pre><code>- plexId: 73061\n  result: false\n</code></pre> this is the overall result of the rule's section 1 (with an `id` of 0)<pre><code>- id: 0\n  result: false\n</code></pre> this is the output of the rule from that section<pre><code>ruleResults:\n  - operator: OR\n    action: contains_partial\n    firstValueName: Overseerr - Requested by user (Plex or local username)\n    firstValue: null\n    secondValueName: text\n    secondValue: ydkmlt84\n    result: false\n</code></pre> <p>As you can see, the overall test result was false. This is because this specific rule is testing to see if <code>Overseerr - Requested by user (Plex or local username)</code> contains_partial <code>ydkmlt84</code>. Which it did not.</p> <p>Test media results show you the <code>firstValue</code> which is the information returned from the service, in this case Overseerr.</p> <p>Then it shows you the comparative, the <code>secondValue</code>, which is the custom text that you put in the rule to look for.</p> <p>In this case the <code>firstValue</code> returned a null value because this item was not requested in Overseerr, therefore there is no data on who requested it in Overseerr.</p>"},{"location":"Test-Media/#test-media-results","title":"Test Media results","text":"<p>Using this information we can tell that this specific Movie would not be added to this rule's collection, because it did not meet the criteria that we setup in the rule. If we expected to see this Movie in the collection, we now know why it wouldn't have been added.</p> <p>If we did not know why a tested item was added to the collection, we can use Test Media to see why it was.</p> <p>This is helpful when you are trying to test a specific rule, usually one that is complex. You can test against a Movie to see if, when that rule would be executed, would it add a specific Movie to the collection. Or, would it not add it if that is what we are testing.</p>"},{"location":"Test-Media/#note-about-test-media-results","title":"Note about Test Media Results","text":"<p>Test Media results do not always include the result of every rule in your ruleset. As mentioned elsewhere, the rules run in order.</p> <p>For example:  If Rule 2 is an AND to Rule 1, and Rule 1 is determined to be <code>FALSE</code>, then only the output of Rule 1 will be shown. This is because Maintainerr didn't even test Rule 2.</p> <p>It is logically impossible for something to be <code>1 AND 2</code>, if it is not <code>1</code> to begin with. There is no point in testing Rule 2, because it will not have an impact on the results.</p> <p>This same thing occurs between Sections as well.</p> <p>The only time this will not be the case is when the OR operator is used. It IS logically possible for the results to be 2, even when it isn't 1, when using <code>1 OR 2</code> logic.</p>"},{"location":"Testing/","title":"Testing","text":"<p>We have implemented a way to test a specific pull request (new feature), using Docker. This can help us to find bugs and issues before being pushed to the develop image and eventually, the latest release.</p> <p>Danger</p> <p> These PR images are HIGHLY volatile and should not be used in production. These are only created to test a specific feature that we are working on, and can break at any moment.</p>"},{"location":"Testing/#testing","title":"Testing","text":""},{"location":"Testing/#install-method","title":"Install Method","text":"<p>In order to test these PR images, a dev would first need to create one. After the image is created, you can see its image name at the GHCR link here -&gt; GHCR images. Again, Docker is the only method for testing these images.</p>"},{"location":"Testing/#getting-started","title":"Getting Started","text":"<p>You can run the PR image using either docker run, or docker compose. Compose is recommended, but it is up to you. These need to be completely separate from your main/stable Maintainerr install, including your <code>host data location</code>/<code>port</code>/<code>container name</code>.</p> <p>Info</p> <p>If you need too much more than what is outlined in this page, as far as installing the PR image...maybe you shouldn't be testing such bleeding edge features. Anywhere you see <code>&lt;xxxx-xxxx&gt;</code>, is considered a placeholder for variable information. Don't exactly copy and paste what is here, as it won't work without you making some changes first.   All of the same applies, as far as file/folder permissions, from the main Installation page.</p>"},{"location":"Testing/#docker-run","title":"Docker Run","text":"<pre><code>    docker run -d \\\n    --name maintainerr-testing \\\n    --hostname maintainerr-testing \\\n    -e TZ=Europe/Brussels \\\n    -e DEBUG=true \\\n    -v &lt;your-testing-host-directory&gt;:/opt/data \\\n    -u 1000:1000 \\\n    -p &lt;9999&gt;:6246 \\\n    --restart unless-stopped \\\n    ghcr.io/jorenn92/maintainerr:&lt;pr-#&gt;\n</code></pre>"},{"location":"Testing/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n    maintainerr-testing:\n        container_name: maintainerr-testing\n        image: ghcr.io/jorenn92/maintainerr:&lt;pr-#&gt;\n        user: 1000:1000\n        volumes:\n          - &lt;your-testing-host-directory&gt;:/opt/data\n        environment:\n          - TZ=Europe/Brussels\n          - DEBUG=true # debug logging needs to be enabled\n        ports:\n          - &lt;9999&gt;:6246\n        restart: unless-stopped\n</code></pre>"},{"location":"Testing/#reporting-issues","title":"Reporting Issues","text":"<p>Remember, we need your feedback! Take a look at what the PR is for, what feature it is implementing, and what testing we are looking for.</p> <p>Reports should be made in one of the two ways:</p> <ul> <li> <p>Github PR page</p> </li> <li> <p>Discord</p> </li> </ul> Discord Link <p>If the Discord link doesn't work for you, message ydkmlt84 on Discord and he can help you out.</p> <p>Pay special attention to how you are submitting reports to the PR, or in Discord. We need specific information, we need logs, we need all of the information you can give us so we can recreate the problem on our end.</p> <p>When you post \"code\" you should use backticks ( ` ). This is not the same as an apostrophe ( ' ). Single line code is surrounded by one backtick on each side of the text, and multi-line code is surrounded by three backticks on each side of the text. (i.e. logs, rule exports, test media results, your compose file or docker run command)</p> <p><code>`How you would use backticks for single line code`</code></p> <pre><code>   ```\n   How you would\n   use backticks\n   for multi-line code\n   ```\n</code></pre>"},{"location":"Testing/#good-reports","title":"Good reports","text":"<ul> <li>if on Discord, the PR number</li> <li>the Docker run or Compose that you used</li> <li>logs</li> <li>exported rules</li> <li>test media results</li> <li>helpful screenshots</li> </ul>"},{"location":"Testing/#bad-reports","title":"Bad reports","text":"<ul> <li>screenshots of your rule/s</li> <li>screenshots of logs</li> <li>screenshots of test media results</li> <li>no logs</li> <li>none of the stuff from Good reports above.</li> </ul>"},{"location":"Works/","title":"How it works","text":""},{"location":"Works/#basic-idea","title":"Basic Idea","text":"<p>Some people come to Maintainerr because they heard it was the solution to whatever problem they were having. Not everyone understands completly, what Maintainerr even is and how to use it.</p>"},{"location":"Works/#quick-rundown","title":"Quick Rundown","text":"<p>Maintainerr looks through your Plex media, to find items that match against the given ruleset. Rulesets can be as easy or as complex as you want.</p> Rule example <p>Here is a quick example: <pre><code>Plex- Date added before 90 days\nAND\nPlex- Viewed by username contains Overseerr- requested by username\n</code></pre> There are more examples and explanations of each option here \u2192 Rule Glossary and here \u2192 Walkthroughs.</p> <p>Once the rule is setup and the rule handler has ran (every 8 hours by default), Maintainerr will add all of this rules matches to a Collection. This collection, once it has matched items inside of it, will get synced to Plex. There are various options as to where you want this collection displayed on your Plex server, but at the very least they will be inside of your library on the Collections tab.</p>"},{"location":"Works/#take-action-after-days","title":"Take action after days","text":"<p>Within the rule creation page there is a setting called <code>Take action after days</code> along with a setting called Sonarr/Radarr/Plex action. Which actions that are available depends on the Library and if you chose a configured Sonarr or Radarr server. An in-depth look at the rule creation settings can be found here \u2192 Walkthrough S01E01</p> <p>Take action after days is how long media will be in this collection before action is taken against it. The action is setup by you when creating the rule. Options include <code>delete, unmonitor and delete, unmonitor and keep, delete season, unmonitor season and keep files, etc.</code></p> <p>Maintainerr will periodically run its Collection handler task (every 12 hours by default), and anything in a collection that meets the <code>Take action after days</code> deadline, action will be taken against it.</p>"},{"location":"Works/#tldr","title":"TLDR;","text":"<p>Maintainerr creates collections, synced with Plex, of items that match your ruleset. These items sit in the collection, displayed in various places on your Plex server, and once a set amount of time has passed, the items are removed/unmonitored. If you setup a rule to catch unwatched items, something got added to a collection, and then the item was watched...Maintainerr will remove it from the collection as it no longer meets the rule criteria (i.e. it is no longer queued for removal).</p>"},{"location":"Works/#requirementslimitations","title":"Requirements/Limitations","text":"<ul> <li>Maintainerr uses Plex as its source of media. Everything has to be in your Plex server for Maintainerr to do anything with it.</li> <li>Setting <code>Take action after days</code> to 0 will not trigger anything based on a schedule. However, it does let you manually take action with the Handle Collections button. 1 is the minimum.</li> <li>You do not have to have Radarr or Sonarr setup in Maintainerr. However, you do have to if you want to use those rules.</li> <li>Maintainerr does have multiple *arr instance capability. We do not currently support mixed HD and UHD Plex libraries from within the same rule.</li> <li>Certain rules are only available based off the Library and Media type (show/season/episode).</li> <li>The data location within the container is <code>/opt/data</code>. This is where your log files live as well as the sqlite file that holds all of your settings.</li> <li>If you do not have a persistent host volume tied to this location, when you update Maintainerr, it will all be gone. Installation.</li> <li>The rule handler runs rules from top to bottom. Pay special attention to the order of your rules, to acheive the desired outcome.</li> <li>Maintainerr does not have authentication. Authentication Suggestion and Feature Request</li> </ul>"},{"location":"Works/#helpful-links","title":"Helpful links","text":"Page Description Rules Basic overview of rules Rules Glossary Outline of the available rules Collections Basic overview of collections Test Media How to test your rules against a specific media item Common Problems A short list of common problems and their solutions Walkthroughs A short series of episodes written to try and help you get started. Installation How to get Maintainerr installed and running. Debug logging How to enable debug logging."},{"location":"blog/tutorials/getting-started-s01e01/","title":"Getting Started (S01E01)","text":"<p>Ok so you installed Maintainerr and don't know where to start.</p> <p>The rule system behind Maintainerr is quite complex, and therefore powerful.  Getting started can be a little daunting at first. That is only because it is new to you. When you get the hang of it, you will be cleaning up that mess you call a library in no time. This will be the first in a series of tutorials that should help you get more familiar with the rules and rule setup.</p> <p></p> <p> </p> <p>Let's take the above movie as an example. This isn't a real movie, but for the purposes of this tutorial we are going to pretend. This movie has the following attributes across Plex, Overseerr, and Radarr:</p> <p>Plex -</p> Added Last Viewed Times Viewed Audience Rating 3Nov2023 10Jan2024 4 7.3 <p>Overseerr -</p> Requested by Requested Date Times Requested by Anyone user_girl123 2Nov2023 4 <p>Radarr -</p> Release Date Is Monitored Runtime 31Oct2023 True 114 minutes <p></p> <p> This information can be looked at for an actual item in your Plex library. You can do it through the Plex UI or you can parse through the XML of an item.  \ud83c\udf10 \u2192 Link to see how to get your Plex Media Info and XML data</p> <p>We want to make a rule that would add this movie to it's collection.</p> <p> There are many more attributes available in the API responses of Plex, Sonarr/Radarr, and Overseerr. We are only looking at these specific ones for the tutorial.</p> <p>Also, this won't be the only movie in the collection. However, all of the other movies that will be added into this collection matched the rule-set for the same reason/s.</p>"},{"location":"blog/tutorials/getting-started-s01e01/#rule-setup","title":"Rule Setup","text":"<p>We will start from the top of a new rule.</p> <p></p> <ul> <li>1: This is the name of the Rule, and will eventually be the name of the Collection that gets created.</li> <li>2: Self explanatory but you can put whatever you want here. It will be shown in Plex when you open the collection.      <p></p></li> <li>3: Drop-down list of your Plex Libraries. Which library is this rule going to be run against?</li> <li>4: This will not be shown if you select a <code>Movies</code> library in step 3. If you selected a <code>TVShow</code> library, your options will be shows/seasons/episodes. What type of TVShow media are we going to run the rule against? An entire show, just seasons, or just episodes? Different options will be made available to you or taken away, depending on what you select here.</li> <li>5: Sonarr/Radarr action is what is going to happen after the <code>action after days</code> set in step 6. Options are dependent on the library and media type from above. <code>Delete</code> will remove the files and the item from Sonarr/Radarr. <code>Unmonitor and delete</code> will unmonitor (not remove) the item from Sonarr/Radarr but delete the files. <code>Unmonitor and keep</code> will unmonitor the item from Sonarr/Radarr and keep the files.</li> <li>6: Think of this as a \"delay\" setting. How many days after this rule is ran, items have been matched to this rules filter parameters and added to the collection, will we execute the action set in step 5?</li> </ul> <p></p> <ul> <li>7: How many months are we going to keep logs of this collections actions?</li> <li>8: Is this Rule active? Will it be one of the rules ran either by a manual run, or through periodic runs?</li> <li>9: Is this collection going to be shown on the Plex Home screen, or are you only going to be able to see it through the Plex Library screen?</li> <li>10: When the action set in step 5 is taken, will Maintainerr also send a hit back to Sonarr/Radarr that excludes this item from being automatically added by any import lists?</li> <li>11:  It is recommended to keep this option off as it uses an outdated method. Maintainerr now automatically does this.</li> <li>When the action set in step 5 is taken, will we tell Overseerr that this item is no longer available and can be requested again?</li> <li>12: You can toggle the rule system off and on. This is useful if you have collections in Plex that you want to see in Maintainerr, but don't want any actions taken on the collection.</li> <li>13: You can create a collection in Plex, and then use that collection in Maintainerr. If you are doing that, tick this Custom Collection box to on. This can be useful if there is a collection made by say PMM or by you, and you want to execute some rules against it.</li> </ul> <p></p>"},{"location":"blog/tutorials/getting-started-s01e01/#rule-configuration","title":"Rule Configuration","text":"<p>Now we are getting into the nitty gritty. After the settings above have been configured to your liking, you start to craft the rule logic. There is a button labeled Community, which are rule setups that have been shared by others. Clicking on this button will list the uploaded rules, and you can use one of these rules if you wish. Clicking on a rule and then clicking on the info button down below, will give you the uploader's description of that rule and possibly how it works.</p> <p> Community rules are just that, from the community. They may not work like they say they do. They may not be formatted properly. It can be a nice place to start, but I personally wouldn't rely on them as everyone's situation is different.</p> <p>Below the Community button there are two other buttons. Import and Export. You can import a rule from a txt file in YAML format (this is an advanced method but it is an option).</p> <p> If you want to go down this path, I would choose one of the Community rules, doesn't really matter which one, and then use the export button. You will get a generated YAML format of the rule. If you are familiar with YAML this will be a good place to start. Take a look at this page for the proper syntax of each parameter \u2192 Rules Glossary.</p> <p>If you are looking at a rule that you have already created, you can export the rule in YAML format, in order to share it or textually edit it.</p>"},{"location":"blog/tutorials/getting-started-s01e01/#rules-and-sections","title":"Rules and Sections","text":"<p>Understanding rules and sections can be crucial to getting your rule setup properly and achieving your desired outcome.</p> <p>When you first start, you will be in the first section. Section 1 - Rule 1. A section is a grouped set of rules with one output over the whole section, depending on what was matched in the rules within that section.</p>"},{"location":"blog/tutorials/getting-started-s01e01/#and","title":"AND","text":"<p>So let's try an AND example...</p> <ul> <li>Our rule 1 setup gains us output X and output Y.</li> <li>Our rule 2 setup gains us output X.</li> <li>Our rule 2 is setup with an AND operator to rule 1.</li> <li>The output of this section would be X only.</li> <li>Since X was matched by rule 1 AND rule 2 but Y was only matched by rule 1, it will not be included in the sections output because we said we want the output of the section to be everthing that matched (rule 1 AND rule 2).</li> </ul>"},{"location":"blog/tutorials/getting-started-s01e01/#or","title":"OR","text":"<p>Now an OR example...</p> <ul> <li>Our rule 1 setup gains us output X and output Y.</li> <li>Our rule 2 setup gains us output X and output Z.</li> <li>Our rule 2 is setup with an OR operator to rule 1.</li> <li>The output of this section would be X, Y, and Z.</li> <li>Since X and Y were matched by rule 1, and X and Z were matched by rule 2, they are all included because we said we want the output of the section to be everything that matched (rule 1 OR rule 2).</li> </ul> <p>This is probably the simplest form of a rule setup that you can get. Well, unless of course you are only using one rule because anything matched by that one rule becomes the output.</p>"},{"location":"blog/tutorials/getting-started-s01e01/#andor","title":"AND/OR","text":"<p>Now let's try a mixed AND / OR example...</p> <ul> <li>Rule 1 setup gains us output X and output Y.</li> <li>Rule 2 setup gains us output X.</li> <li>Rule 2 is setup with an AND operator to rule 1.</li> <li>The output is X, as before.</li> <li>Rule 3 setup gains us output G and output M.</li> <li>Rule 3 is setup with an OR operator to rule 2.</li> <li>The output of the whole section would be X, G, and M.</li> <li>Since X was matched by rule 1 AND rule 2 but Y was only matched by rule 1, the output of rule 2 will be only X. Since G and M were matched by rule 3, and we said we want the output of the section to be anything that matches ((rule 1 AND 2 ) OR rule 3)... we get X, G, and M.</li> </ul> <p>This is a very good jumping off point for you to start making rules. If you are still not 100% confident yet, or just want/need more, take a look at S01E02 and go even deeper down the rabbit-hole.</p>"},{"location":"blog/tutorials/rule-creation-s01e02/","title":"Rule Creation (S01E02)","text":"<p>Let's go a little further into Rules with some simple examples to get you started.</p> <p>In episode 1 we went over a super basic outline of rules and sections, operators, and general rule setup. In today's episode we will go over some simple rules examples. You could setup a few AND rules and roll with it, but then you wouldn't be using Maintainerr to its full potential. This episode should give you a good base of rule knowledge to build off of.</p> <p>Let's bring back the Movie from episode 1, that we wanted to add into our new collection.</p> <p> </p> <p>This movie has the following attributes across Plex, Overseerr, and Radarr:</p> <p>Plex -</p> Added Last Viewed Times Viewed Audience Rating 3Nov2023 10Jan2024 4 7.3 <p>Overseerr -</p> Requested by Requested Date Times Requested by Anyone user_girl123 2Nov2023 4 <p>Radarr -</p> Release Date Is Monitored Runtime 31Oct2023 True 114 minutes <p>With this information, we have quite a few options that we can use as rule parameters/filters.</p>"},{"location":"blog/tutorials/rule-creation-s01e02/#examples","title":"Examples","text":""},{"location":"blog/tutorials/rule-creation-s01e02/#simple-rule","title":"Simple Rule","text":"<ul> <li>1: We can use one rule that states <code>Plex-Date Added</code> <code>before</code> <code>amount of days</code> <code>60</code>.</li> <li>This will match in our special tutorial scenario because the day the Movie was added to Plex happened 60 days or more \"before\" today's date.</li> <li>2: We could use a rule that states <code>Plex-Times Viewed</code> <code>bigger</code> <code>number</code> <code>3</code>.</li> <li>This would get added because it has a Times Viewed value of 4, which is bigger than 3.</li> <li>3: We could also use a rule that states <code>Plex-Audience Rating (scale 1-10)</code> <code>bigger</code> <code>number</code> <code>5</code>.</li> <li>This rule would catch our movie because it's Audience Rating is 7.3. Which is bigger than 5.</li> </ul>"},{"location":"blog/tutorials/rule-creation-s01e02/#simple-and","title":"Simple AND","text":"<ul> <li>1: We could add Rule 1 that states <code>Plex-Date Added</code> <code>before</code> <code>amount of days</code> <code>60</code>. Rule 2 that states AND <code>Plex-Times Viewed</code> <code>bigger</code> <code>number</code> <code>5</code>.</li> <li>This would not catch our movie because it has a Times Viewed value of 4 and we need it to match  (rule 1 AND rule 2). It does match rule 1 but it does not match rule 2. If another movie in the library was added 60 days ago or more AND it had a view count of more than 5. It WOULD get added to this rule.  </li> </ul> <p>Let's try one more.</p> <ul> <li>2: Rule 1 states <code>Plex-Times Viewed</code> <code>bigger</code> <code>number</code> <code>3</code>. Rule 2 states AND <code>Overseerr-Amount of Requests</code> <code>equals</code> <code>Plex-Times Viewed</code>.</li> <li>This rule-set WOULD add our movie because it's Times Viewed amount is 4 (bigger than 3), AND the Amount of Requests(4) from Overseerr EQUALS the Times Viewed(4) amount from Plex. (Rule1 AND Rule2)</li> </ul> <p>Those are some fairly simple AND examples, and hopefully it is starting to become obvious what is going on. Within a section, and only using AND operators, each item also needs to match the rule before it to be counted as a match and added to the collection.</p> <p>Another way to look at these examples, is that within a section, each rule is making a list. The next rule is checking that list to see if anything ALSO has that value, plus the value of it's own rule.</p>"},{"location":"blog/tutorials/rule-creation-s01e02/#visual-example","title":"Visual Example","text":"<pre><code>graph LR\ntitle:&gt;Rule-set: Rule1 AND Rule2]\n   A([Has it been viewed in Plex more than 3 times?]) --&gt;|Yes|B([AND is it monitored in Radarr?])\n   B --&gt;|Yes| C([Add it to the collection])\n   B --&gt;|No| D([Don't add to the collection.])</code></pre>"},{"location":"blog/tutorials/rule-creation-s01e02/#simple-or","title":"Simple OR","text":"<p>We don't have to go too far in-depth with this because of what we have already learned. We will just give a quick example, then a visual.</p> <ul> <li>1: We can use one rule that states <code>Plex-Date Added</code> <code>before</code> <code>amount of days</code> <code>90</code>.</li> <li>This will not match in our special tutorial scenario because the day the Movie was added to Plex happened only 60 days BEFORE today's date. Not quite 90 days yet.</li> <li>2: Our next rule states OR <code>Overseerr-Requested by user (Plex or local username)</code> <code>Contains (Partial list match)</code> <code>text</code> <code>user_girl123</code>.</li> <li>This would match because as we can see, that is who requested the movie.</li> <li>3: This rule-set WOULD add our movie because it meets one OR the other of our criteria. It was added 60 days ago so it does not meet our criteria of BEFORE 90 days, AKA the day it was added has not yet been 90 days BEFORE today's date. It did however match the Overseerr requested by user rule. It gets added because we said we wanted (Rule 1 OR Rule 2). Now let's get a visual.</li> </ul>"},{"location":"blog/tutorials/rule-creation-s01e02/#visual-example_1","title":"Visual Example","text":"<pre><code>graph LR\ntitle:&gt;Rule-set: Rule1 OR Rule2]\nA([Was it added to Plex before 90 days?]) --&gt;|No|B([Did it match one OR the other]);\n C([Was it requested by user_girl123]) --&gt;|Yes|B;\n B --&gt;|Yes|D([Add it to the collection]); </code></pre> <p>Again, I hope this is starting to come together. In our next episode we will be going over the use of sections and when they can be useful. Stay tuned.</p>"},{"location":"blog/tutorials/sections-s01e03/","title":"Sections (S01E03)","text":"<p>Why do we even have sections?</p> <p>It has been said that another word for sections could be <code>group</code>. The reason behind a section is to group a section of rules together. We need a way to group a few rules together, that we don't want to be a part of the main rule set.</p>"},{"location":"blog/tutorials/sections-s01e03/#example-1","title":"Example 1","text":"<p>This is especially helpful when we need an OR to be ran without it effecting the rest of our rule. In the below example, an item would be included even if it didn't match our other rules (if we ran them all in one section).</p> <pre><code>flowchart LR\nsubgraph Section1\nA(Was it added to Plex before 90 days?)-.AND.-&gt;B(Is it monitored in Radarr?)\n B -.OR.-&gt;C(Was it requested by user_girl123?)\n end\n C --&gt;D(Add it to the collection) </code></pre> <p>In this example it would only have to have been requested by user_girl123 to have matched our rules and be added to the collection. Because we said we wanted <code>Rule1</code> AND <code>Rule2</code> OR <code>Rule3</code>. If <code>user_girl123</code> requested this item but it was not added to Plex before 90 days, it would have matched anyways and been added to the collection. In this tutorial episode, that isn't what we want.</p>"},{"location":"blog/tutorials/sections-s01e03/#example-2","title":"Example 2","text":"<p>Now let's see what would happen in a section example.</p> <pre><code>flowchart\nsubgraph Section1\nA(Was it added to Plex before 90 days?)-.AND.-&gt;B(Is it monitored in Radarr?)\nend\n B --&gt;C(Section 1 Results)\n subgraph Section2\n D(Was it requested by user_girl123?) -.OR.-&gt;E(Has it been watched more than 2 times?)\n end\n E --&gt;F(Section2 Results)\n C --&gt;G(Section1 AND Section2)\n F --&gt;G\n G ==&gt;H(Add to the collection) </code></pre> <p>In this example we added another rule to the mix. This Section 1 setup would catch items that were <code>added to Plex before 90 days</code> AND <code>monitored in Radarr</code>, regardless of if they were <code>requested by user_girl123</code> or <code>watched more than 2 times</code>. The Section 2 setup would catch items that were <code>requested by user_girl123</code> OR <code>watched more than 2 times</code>.</p> <p>In order for something to match the overall rule set, it would have to meet our section 1 results AND our section 2 results. It would need to have been <code>added to Plex before 90 days</code> AND <code>monitored in Radarr</code> AND <code>watched more than 2 times</code>. OR, it would have to have been <code>added to Plex before 90 days</code> AND <code>monitored in Radarr</code> AND <code>requested by user_girl123</code>.</p>"},{"location":"blog/tutorials/sections-s01e03/#example-3","title":"Example 3","text":"<p>Maintainerr runs the rules in a section in order from Rule 1 to Rule X. So when you are making your rules, keep that in mind. This can be useful in a large library where your first rule could potentially match to a lot of items. It is advisable to put this rule at the end of the section. One example could be a rule that is like this:</p> <p>Don't do :</p> <pre><code>flowchart LR\nA(Does it have zero views?)--AND--&gt;B(Is it older than 3 years?)\n B --AND--&gt;C(Does it not include the Radarr tag *save* ?)</code></pre> <p>This example is going to have a lot of results for the <code>zero views</code> rule (potentially 4k out of a 6k and above Movie library). It would be better in this instance to put the <code>zero views</code> criteria at the end. Due to the way Maintainerr runs the rules in order, its \"list\" from rule 1 could be everything that is <code>older than 3 years</code> (potentially only 2k out of the 6k plus movies), then we only have to sift through those 2k items to find the ones that have <code>zero views</code>.It could be even further reduced if say 300 of those have the <code>save</code> tag. We shaved off 2k movies that need to be checked for <code>zero views</code>. These numbers are made up, but this could possibly be the difference of a few hours in a rule execution, or worst case the rule crashes before completion.</p> <p>Do:</p> <pre><code>flowchart LR\nA(Is it older than 3 years?)--AND--&gt;B(Does it not include the Radarr tag *save* ?)\n B --AND--&gt;C(Does it have zero views?)</code></pre>"},{"location":"blog/tutorials/sections-s01e03/#example-4","title":"Example 4","text":"<p>This will be our last example/scenario of sections.</p> <pre><code>flowchart LR\nsubgraph Section1\nA(Was it added to Plex before 90 days?)\nend\nsubgraph Section 2\n B(Is it monitored in Radarr?)\nend\nsubgraph Section 3\n C(Was it requested by user_girl123?)\n end\nA-.AND.-&gt;B\nB-.AND.-&gt;C\nC ==&gt; D(Results)</code></pre> <p>This is the same thing as putting all of those rules in one section. <code>Section 1 results</code> AND <code>Section 2 results</code> AND <code>Section 3 results</code>. There is no need to do this and you should keep them all in one section. (Section 1 (Rule 1 AND Rule 2 AND Rule 3)).</p>"},{"location":"blog/tutorials/sections-s01e03/#closing","title":"Closing","text":"<p>Hopefully you learned a little something today. :) If not, I will try harder next time.</p> <ul> <li>One more thing I would like to add is how an <code>OR</code> works when compared to an <code>AND</code>. Again, Maintainerr runs rules in order and makes \"list\". When <code>Rule 1</code> gets looked at, a \"list\" is created. When Rule 2 is an <code>AND</code> to Rule 1, Rule 2 criteria gets matched only to items in the Rule 1 \"list\". If Rule 2 was an <code>OR</code> to Rule 1, the entire library gets looked at again (during Rule 2) to see if anything matches its criteria. This \"list\" gets added to the Rule 1 list.</li> </ul> <p>Please send me an email at ydkmlt84@maintainerr.info for suggestions on what to cover in the next episode.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/tutorials/","title":"Tutorials","text":""}]}